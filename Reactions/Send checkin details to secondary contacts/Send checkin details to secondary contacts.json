{
  "_id": "621387b3a4adca0018cd7692",
  "apikey_unique": {
    "type": "Point",
    "coordinates": [
      0,
      0
    ]
  },
  "owners": [
    {
      "_id": "5eb14f76f4e2c15ffb9bf805",
      "firstName": "Sam",
      "lastName": "Rae",
      "name": "Sam Rae",
      "_type": "user"
    }
  ],
  "managedOwners": [
    {
      "_id": "5eb14f10ff872a540dbbbe16",
      "_type": "persona",
      "firstName": "Sam",
      "title": "Sam Rae",
      "lastName": "Rae"
    }
  ],
  "status": "active",
  "hashtags": [

  ],
  "_references": [

  ],
  "mentions": [

  ],
  "keywords": [
    "christian conventions of wa inc"
  ],
  "privacy": "secure",
  "triggers": [

  ],
  "conditions": [

  ],
  "contacts": [

  ],
  "teams": [

  ],
  "integrations": [

  ],
  "items": [

  ],
  "styles": [

  ],
  "realms": [
    {
      "_id": "5e82a7cd281d6602b698b483",
      "title": "Christian Conventions of WA Inc",
      "color": "#7f12b3",
      "bgColor": "#e7b3ff",
      "slug": "christian-conventions-of-wa-inc",
      "_type": "realm"
    }
  ],
  "policies": [

  ],
  "developmentMode": false,
  "tags": [

  ],
  "actions": [
    {
      "conditions": [

      ],
      "type": "code",
      "_id": "622e24ad1ef900015ab2e328",
      "script": "// Get the interaction ID\n\nlet inputType;\nlet interaction;\n\nif(input.hasOwnProperty(\"item\")) {\n    if(input.item._type == \"interaction\") {\n        inputType = \"AutoInteraction\";\n        \n        interaction = input.item._id;\n    }\n} else if (input.hasOwnProperty(\"_type\")) {\n    if(input._type == \"interaction\") {\n        inputType = \"ManualInteraction\";\n\n        interaction = input._id;\n    }\n} else { // Input type is invalid\n    inputType = \"unknown\";\n}\n\ninput = {};\ninput.inputType = inputType;\ninput.interaction = interaction;\n\nreturn done(null, input);"
    },
    {
      "conditions": [
        "inputType == \"unknown\""
      ],
      "type": "stop",
      "_id": "622e24ad1ef900015ab2e329"
    },
    {
      "conditions": [

      ],
      "type": "populate",
      "_id": "622e24ad1ef900015ab2e32a",
      "data": {
        "keys": [
          "interaction"
        ],
        "populateSelect": [

        ]
      }
    },
    {
      "conditions": [

      ],
      "type": "populate",
      "_id": "622e24ad1ef900015ab2e32b",
      "data": {
        "keys": [
          "interaction.realms"
        ],
        "populateSelect": [
          "title",
          "data.registrarEmail"
        ]
      }
    },
    {
      "conditions": [

      ],
      "type": "code",
      "_id": "622e24ad1ef900015ab2e32c",
      "script": "/*\nExtract the data we need.\n*/\n\n// Get interaction info\nlet interaction = {\n    \"_id\": input.interaction._id,\n    \"definition\": input.interaction.definition,\n    \"realm\": {\n        \"title\": input.interaction.realms[0].title,\n        \"email\": input.interaction.realms[0].data.registrarEmail\n    }\n};\n\n// Get contact info\nlet primaryContact;\nlet secondaryContacts = {};\n\nfor(let i=0; i<input.interaction.rawData.contact.length; i++) {\n    if(input.interaction.rawData.contact[i].email == input.interaction.primaryEmail) {\n\n        primaryContact = {\n            \"_id\": input.interaction.data.contact[i],\n            \"firstName\": input.interaction.rawData.contact[i].firstName, \n            \"lastName\": input.interaction.rawData.contact[i].lastName,\n            \"email\": input.interaction.rawData.contact[i].email\n        };\n        \n    } else {\n        \n        secondaryContacts[input.interaction.data.contact[i]] = {\n            \"_id\": input.interaction.data.contact[i],\n            \"firstName\": input.interaction.rawData.contact[i].firstName, \n            \"lastName\": input.interaction.rawData.contact[i].lastName,\n            \"email\": input.interaction.rawData.contact[i].email\n        };\n    }\n}\n\nif(secondaryContacts.length == 0) { // No secondary contacts. This Reaction is not needed.\n    return done(null, 'STOP'); \n}\n\ninput = {};\n\ninput.interaction = interaction;\ninput.primaryContact = primaryContact;\ninput.secondaryContacts = secondaryContacts;\n\nreturn done(null, input);",
      "deactivate": false
    },
    {
      "conditions": [

      ],
      "type": "code",
      "_id": "621ca67897fa3e006288c52b",
      "script": "/*\nGet tickets related to these contacts and this interaction\n*/\n\n//Load packages\nvar _ = require('lodash');\nvar async = require('async');\n\n// Set up results structures to return info to the next step]\nvar tickets = [];\n\n// Get input data needed\nlet interactionID = _.get(input, 'interaction._id');\n\n/*\nGET https://api.fluro.io/tickets/:connection/:connectionID\nDESCRIPTION\nReturns an array of all tickets connected to a specified content item.\n\nOptions are \n/tickets/interaction/<INTERACTIONID>\n/tickets/contact/<CONTACTID>\n/tickets/event/<EVENTID>\n*/\n$fluro.api.get(`/tickets/interaction/${interactionID}`)\n    .then(res => {\n        tickets.push(res.data);\n    })\n    .catch(err => {\n        return done(err, \"STOP\");\n    });\n\n// Return results\ninput.tickets = tickets;\n\nreturn done(null, input);"
    },
    {
      "conditions": [

      ],
      "type": "code",
      "_id": "621ebff1245c8d0011340979",
      "script": "/*\nPut tickets under each contact\n*/\n\nlet interaction = input.interaction;\nlet primaryContact = input.primaryContact;\nlet secondaryContacts = input.secondaryContacts;\nlet tickets = input.tickets[0];\n\n// Put tickets under each contact\nfor (let i=0; i<tickets.length; i++) {\n\n    if(tickets[i].status == \"active\" && tickets[i].hasOwnProperty(\"event\")) { // If the ticket is active and there is an associated event\n\n        if(secondaryContacts.hasOwnProperty(tickets[i].contact._id)) { // If the contact is a secondary contact\n\n            // If the contact does not already have a ticket array, create it\n            if(!secondaryContacts[tickets[i].contact._id].hasOwnProperty(\"tickets\")) { \n                secondaryContacts[tickets[i].contact._id].tickets = [];\n            }\n\n            // Add the ticket to the contact's ticket array\n            secondaryContacts[tickets[i].contact._id].tickets.push({\n                 \"_id\": tickets[i]._id,\n                \"title\": tickets[i].title,\n                \"event\": {\n                    \"_id\": tickets[i].event._id,\n                    \"title\": tickets[i].event.title,\n                    \"startDate\": tickets[i].event.startDate,\n                    \"endDate\": tickets[i].event.endDate\n                }\n            });\n        }\n    }\n}\n\n\n// Return the data\ninput = {};\n\ninput.interaction = interaction;\ninput.primaryContact = primaryContact;\ninput.secondaryContacts = secondaryContacts;\n\nreturn done(null, input);"
    },
    {
      "conditions": [

      ],
      "type": "code",
      "_id": "6217935f76a61400104245b8",
      "script": "/*\nEmail each extra attendee with ticket details\n*/\n\n\n//Load packages\nvar _ = require('lodash');\nvar async = require('async');\n\n// Set up request headers\nconst headers = {\"Content-Type\": \"application/json; charset=utf-8\"};\n\n// Set up results structures to return info to the next step]\nconst results = [];\n\n// Get input data needed\nlet interaction = _.get(input, 'interaction');\nlet primaryContact = _.get(input, 'primaryContact');\nlet secondaryContacts = _.get(input, 'secondaryContacts');\n\nlet ticketURL = `http://tickets.fluro.io/interaction/${interaction._id}`;\nlet interactionURL = `https://app.fluro.io/list/interaction/${interaction.definition}/${interaction._id}/edit`;\n\n// Run the async function\nreturn async.forEachOfSeries(secondaryContacts, emailTicketInfo, emailTicketInfoCallback);\n\n// Function to execute on each contact\nfunction emailTicketInfo(contact, index, next) {\n\n    let eventList = \"\";\n\n    for(let i=0; i<contact.tickets.length; i++) {\n\n        let startDateObject = new Date(contact.tickets[i].event.startDate);\n        let startDateString = startDateObject.toLocaleString('en-AU', {dateStyle: \"long\", timeStyle: \"short\", timeZone: \"Australia/Perth\"});\n        \n        eventList = eventList + `<h3>${contact.tickets[i].event.title}</h3>\n            <p>${contact.tickets[i].title}</p>\n            <p>${startDateString}</p>`;\n    }\n\n    let emailBody = `\n    <div style=\"text-align: center;\">\n        <h1>${interaction.realm.title} check-in details</h1>\n        <hr/>\n        <img src=\"https://api.fluro.io/system/qr?input=${ticketURL}\" style=\"border: 10px solid black; border-radius: 10px;\" width=\"150px\"/>\n        <h3>${contact.firstName} ${contact.lastName}</h3>\n        <p>${contact.email}</p>\n        <hr/>\n        ${eventList}\n        <hr/>\n    </div>\n    <div style=\"text-align: left;\">\n        <p>The payment receipt and full registration details have been sent to ${primaryContact.firstName} ${primaryContact.lastName} (${primaryContact.email}).</p>\n        <h4>Need help?</h4>\n        <p>Reply to this email, or contact us at <a href=\"mailto:${interaction.realm.email}?subject=${interaction.realm.title} enquiry\">${interaction.realm.email}.</p>\n        <hr/>\n        <p><small>Christian Conventions of Western Australia<br/>\n        ABN 38 223 904 915<br/></small></p>\n        <p style=\"color:#AAA;\"><small>\n        Admin links: <a href=\"${interactionURL}\">Form submission</a></small></p>\n    </div>`;\n\n    let body = {\n    \t\"fromName\": interaction.realm.title,\n    \t\"fromEmail\": interaction.realm.email,\n    \t\"toEmails\": contact.email,\n    \t//\"toContactIDs\": [\"\"],\n    \t\"subject\": `${interaction.realm.title} check-in details`,\n    \t\"body\": emailBody\n    };\n    \n    let emailReactionID = \"621dfa141b17ad02986c7d78\";\n    \n    // POST https://api.fluro.io/reaction/spark/:reactionID\n    $fluro.api.post(`/reaction/spark/${emailReactionID}`,body,headers)\n    .then(res => {\n        results.push(res.data);\n        next();\n    })\n    .catch(err => next(err));\n}\n\n// Callback function — after all iterations are finished\nfunction emailTicketInfoCallback(err) {\n    if (err) {\n        var errorMessage = $fluro.utils.errorMessage(err);\n        return done(errorMessage, \"STOP\");\n    }\n\n\t// Return results\n\treturn done(null, input);\n}",
      "deactivate": false
    },
    {
      "conditions": [

      ],
      "type": "stop",
      "_id": "6213941e791c2700122350cb"
    }
  ],
  "permissionSets": [
    {
      "realms": [
        {
          "_id": "5e82a7cd281d6602b698b483",
          "status": "active",
          "title": "Christian Conventions of WA Inc",
          "color": "#7f12b3",
          "bgColor": "#e7b3ff",
          "created": "2020-03-31T02:15:41.877Z",
          "updated": "2020-03-31T02:15:41.912Z",
          "slug": "christian-conventions-of-wa-inc",
          "_type": "realm"
        }
      ],
      "roles": [
        {
          "_id": "57f4640c461bb7401a858f77",
          "title": "Full Access",
          "_type": "role",
          "realms": [
            "54ebd2ef3a6e88a31bb68640"
          ],
          "status": "active",
          "updated": "2021-02-24T06:19:11.856Z",
          "created": "2016-10-05T02:23:08.750Z",
          "firstLine": "Grants access to Create, Edit, View and Delete almost every type of content in the system"
        }
      ]
    }
  ],
  "title": "Send checkin details to secondary contacts",
  "account": {
    "_id": "5e82a7cd281d6602b698b481",
    "status": "active",
    "title": "CCOWA",
    "countryCode": "AU",
    "timezone": "Australia/Perth"
  },
  "author": {
    "_id": "5eb14f76f4e2c15ffb9bf805",
    "firstName": "Sam",
    "lastName": "Rae",
    "name": "Sam Rae",
    "_type": "user"
  },
  "managedAuthor": {
    "_id": "5eb14f10ff872a540dbbbe16",
    "_type": "persona",
    "firstName": "Sam",
    "title": "Sam Rae",
    "lastName": "Rae"
  },
  "_type": "reaction",
  "updatedBy": "Sam Rae",
  "created": "2022-02-21T12:38:11.188Z",
  "updated": "2022-03-14T02:07:08.827Z",
  "tests": [
    {
      "_id": "6213941e791c2700122350cc",
      "title": "Registration for test event",
      "json": "{\n  \"trigger\": \"content.create\",\n  \"data\": {\n    \"_type\": \"interaction\",\n    \"definition\": \"testTicketing\",\n    \"submittedData\": {\n      \"title\": \"Test ticketing\",\n      \"data\": {\n        \"contact\": \"619ca4884de7ec000f03a8af\"\n      },\n      \"realms\": [\n        \"61f546264d66c70018d73006\"\n      ],\n      \"rawData\": {\n        \"contact\": {\n          \"firstName\": \"Test\",\n          \"lastName\": \"Person\",\n          \"gender\": \"male\",\n          \"dob\": \"1982-05-19T00:00:00.000Z\",\n          \"email\": \"samrae+test@gmail.com\",\n          \"phoneNumber\": \"0439769319\"\n        }\n      },\n      \"connectionData\": {\n        \"ip\": {\n          \"clientIp\": \"159.196.133.245\",\n          \"clientIpRoutable\": true\n        }\n      },\n      \"applicationAuthor\": \"5eff0aa041a86b0cfbe961c5\",\n      \"account\": \"5e82a7cd281d6602b698b481\",\n      \"primaryEmail\": \"samrae+test@gmail.com\",\n      \"contact\": null,\n      \"contacts\": [\n        \"619ca4884de7ec000f03a8af\"\n      ],\n      \"attemptLog\": \"621389120e1fa511f17aea9c\",\n      \"mentions\": [],\n      \"hashtags\": [],\n      \"_type\": \"interaction\",\n      \"definition\": \"testTicketing\"\n    }\n  },\n  \"item\": {\n    \"_id\": \"621389140e1fa511f17aeaa3\",\n    \"owners\": [],\n    \"managedOwners\": [],\n    \"realms\": [\n      \"61f546264d66c70018d73006\"\n    ],\n    \"title\": \"Test ticketing\",\n    \"_type\": \"interaction\",\n    \"definition\": \"testTicketing\"\n  }\n}",
      "testEmail": "sam@stalbans.org.au"
    },
    {
      "_id": "6213941e791c2700122350cd",
      "title": "Registration for test event — multiple contacts",
      "json": "{\n  \"trigger\": \"content.create\",\n  \"data\": {\n    \"_type\": \"interaction\",\n    \"definition\": \"testTicketing\",\n    \"submittedData\": {\n      \"title\": \"Test ticketing\",\n      \"data\": {\n        \"contact\": [\n          \"5e97e0806a9f734dcdc940f1\",\n          \"619ca4884de7ec000f03a8af\"\n        ]\n      },\n      \"realms\": [\n        \"61f546264d66c70018d73006\"\n      ],\n      \"rawData\": {\n        \"contact\": [\n          {\n            \"firstName\": \"Sam\",\n            \"lastName\": \"Rae\",\n            \"gender\": \"male\",\n            \"dob\": \"1982-05-19T00:00:00.000Z\",\n            \"email\": \"samrae@gmail.com\",\n            \"phoneNumber\": \"0439769319\"\n          },\n          {\n            \"firstName\": \"Test\",\n            \"lastName\": \"Person\",\n            \"gender\": \"male\",\n            \"dob\": \"1982-05-19T00:00:00.000Z\",\n            \"email\": \"samrae+test@gmail.com\",\n            \"phoneNumber\": \"0439769319\"\n          }\n        ]\n      },\n      \"connectionData\": {\n        \"ip\": {\n          \"clientIp\": \"159.196.133.245\",\n          \"clientIpRoutable\": true\n        }\n      },\n      \"applicationAuthor\": \"5eff0aa041a86b0cfbe961c5\",\n      \"account\": \"5e82a7cd281d6602b698b481\",\n      \"primaryEmail\": \"samrae@gmail.com\",\n      \"contact\": null,\n      \"contacts\": [\n        \"5e97e0806a9f734dcdc940f1\",\n        \"619ca4884de7ec000f03a8af\"\n      ],\n      \"attemptLog\": \"621389b19a2daf0011de9af8\",\n      \"mentions\": [],\n      \"hashtags\": [],\n      \"_type\": \"interaction\",\n      \"definition\": \"testTicketing\"\n    }\n  },\n  \"item\": {\n    \"_id\": \"621389b69a2daf0011de9b06\",\n    \"owners\": [],\n    \"managedOwners\": [],\n    \"realms\": [\n      \"61f546264d66c70018d73006\"\n    ],\n    \"title\": \"Test ticketing\",\n    \"_type\": \"interaction\",\n    \"definition\": \"testTicketing\"\n  }\n}",
      "testEmail": "sam@stalbans.org.au"
    },
    {
      "_id": "622e24ad1ef900015ab2e333",
      "title": "Registration for test event (Interaction JSON)",
      "json": "{\n  \"_id\": \"621389b69a2daf0011de9b06\",\n  \"owners\": [\n    \n  ],\n  \"managedOwners\": [\n    \n  ],\n  \"status\": \"active\",\n  \"hashtags\": [\n    \n  ],\n  \"_references\": [\n    \"5e97e0806a9f734dcdc940f1\",\n    \"619ca4884de7ec000f03a8af\"\n  ],\n  \"mentions\": [\n    \n  ],\n  \"keywords\": [\n    \"testing\"\n  ],\n  \"privacy\": \"secure\",\n  \"contacts\": [\n    {\n      \"_id\": \"5e97e0806a9f734dcdc940f1\",\n      \"emails\": [\n        \"samrae@gmail.com\",\n        \"sam@stalbans.org.au\"\n      ],\n      \"phoneNumbers\": [\n        \"0439769319\"\n      ],\n      \"_type\": \"contact\",\n      \"firstName\": \"Sam\",\n      \"lastName\": \"Rae\",\n      \"title\": \"Sam Rae\"\n    },\n    {\n      \"_id\": \"619ca4884de7ec000f03a8af\",\n      \"emails\": [\n        \"samrae+test@gmail.com\"\n      ],\n      \"phoneNumbers\": [\n        \"0439769319\"\n      ],\n      \"_type\": \"contact\",\n      \"firstName\": \"Test\",\n      \"title\": \"Test Person\",\n      \"lastName\": \"Person\"\n    }\n  ],\n  \"hasIssues\": false,\n  \"issues\": [\n    \n  ],\n  \"realms\": [\n    {\n      \"_id\": \"61f546264d66c70018d73006\",\n      \"_type\": \"realm\",\n      \"title\": \"Testing\",\n      \"color\": \"#FFFFFFFF\",\n      \"bgColor\": \"#FF7700FF\",\n      \"slug\": \"realm-testing\",\n      \"definition\": \"convention\"\n    }\n  ],\n  \"tags\": [\n    \n  ],\n  \"transactions\": [\n    \n  ],\n  \"amount\": 0,\n  \"amountDue\": 0,\n  \"manualPayments\": [\n    \n  ],\n  \"paymentModifiers\": [\n    \n  ],\n  \"title\": \"Test ticketing\",\n  \"data\": {\n    \"contact\": [\n      {\n        \"_id\": \"5e97e0806a9f734dcdc940f1\",\n        \"status\": \"active\",\n        \"realms\": [\n          \"5e82a7cd281d6602b698b484\",\n          \"6088c1cb87f82418764b7114\",\n          \"5e97abd48beea3051136186f\",\n          \"5e82a7cd281d6602b698b482\",\n          \"5e82a7cd281d6602b698b486\",\n          \"5e82a7ce281d6602b698b488\",\n          \"5e82a7cd281d6602b698b485\",\n          \"5e82a7ce281d6602b698b489\",\n          \"5e82a7cd281d6602b698b483\",\n          \"608a565b6eb42c090022c3fd\",\n          \"608a56b56eb42c090022d259\",\n          \"608a570bd9e05730879ce9c2\",\n          \"61f546264d66c70018d73006\",\n          \"606ecb8ec9c89661558d0bc1\",\n          \"6215e2e8d7cc7c001956c492\",\n          \"5e9d1bf79b953262c33e187f\"\n        ],\n        \"_type\": \"contact\",\n        \"firstName\": \"Sam\",\n        \"lastName\": \"Rae\",\n        \"created\": \"2020-04-16T04:35:12.840Z\",\n        \"updated\": \"2022-03-02T15:32:36.477Z\",\n        \"title\": \"Sam Rae\",\n        \"timezone\": \"Australia/Perth\"\n      },\n      {\n        \"_id\": \"619ca4884de7ec000f03a8af\",\n        \"status\": \"active\",\n        \"realms\": [\n          \"5e82a7cd281d6602b698b486\",\n          \"619376c2ac6eda000f1d32cb\",\n          \"5e82a7cd281d6602b698b483\",\n          \"61f546264d66c70018d73006\",\n          \"6183a592ff54a70c8879706e\",\n          \"608a565b6eb42c090022c3fd\",\n          \"608a56b56eb42c090022d259\"\n        ],\n        \"_type\": \"contact\",\n        \"firstName\": \"Test\",\n        \"title\": \"Test Person\",\n        \"lastName\": \"Person\",\n        \"created\": \"2021-11-23T08:21:28.969Z\",\n        \"updated\": \"2022-02-21T12:46:52.990Z\",\n        \"timezone\": \"Australia/Perth\"\n      }\n    ]\n  },\n  \"rawData\": {\n    \"contact\": [\n      {\n        \"firstName\": \"Sam\",\n        \"lastName\": \"Rae\",\n        \"gender\": \"male\",\n        \"dob\": \"1982-05-19T00:00:00.000Z\",\n        \"email\": \"samrae@gmail.com\",\n        \"phoneNumber\": \"0439769319\"\n      },\n      {\n        \"firstName\": \"Test\",\n        \"lastName\": \"Person\",\n        \"gender\": \"male\",\n        \"dob\": \"1982-05-19T00:00:00.000Z\",\n        \"email\": \"samrae+test@gmail.com\",\n        \"phoneNumber\": \"0439769319\"\n      }\n    ]\n  },\n  \"connectionData\": {\n    \"ip\": {\n      \"clientIp\": \"159.196.133.245\",\n      \"clientIpRoutable\": true\n    }\n  },\n  \"applicationAuthor\": \"5eff0aa041a86b0cfbe961c5\",\n  \"account\": {\n    \"_id\": \"5e82a7cd281d6602b698b481\",\n    \"status\": \"active\",\n    \"title\": \"CCOWA\",\n    \"countryCode\": \"AU\",\n    \"timezone\": \"Australia/Perth\"\n  },\n  \"primaryEmail\": \"samrae@gmail.com\",\n  \"contact\": null,\n  \"attemptLog\": \"621389b19a2daf0011de9af8\",\n  \"_type\": \"interaction\",\n  \"definition\": \"testTicketing\",\n  \"created\": \"2022-02-21T12:46:46.317Z\",\n  \"updated\": \"2022-02-21T12:46:46.454Z\",\n  \"embedFields\": [\n    \n  ],\n  \"key\": \"testTicketing\",\n  \"statDates\": {\n    \"interaction\": \"2022-02-21T12:46:46.683Z\"\n  },\n  \"stats\": {\n    \"interaction\": 2\n  }\n}",
      "testEmail": "sam@stalbans.org.au"
    }
  ],
  "apikey": "$2a$10$FoXQjqyymBjdV2Hxqh43ae4KH8LtfLih9d/3VQ0f1PLFRuhf6Fut.",
  "data": {

  },
  "statDates": {
    "view": "2022-02-24T09:37:05.375Z"
  },
  "stats": {
    "view": 1
  }
}
