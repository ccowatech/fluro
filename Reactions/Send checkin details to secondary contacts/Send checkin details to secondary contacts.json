{
  "_id": "621387b3a4adca0018cd7692",
  "apikey_unique": {
    "type": "Point",
    "coordinates": [
      0,
      0
    ]
  },
  "owners": [
    {
      "_id": "5eb14f76f4e2c15ffb9bf805",
      "firstName": "Sam",
      "lastName": "Rae",
      "name": "Sam Rae",
      "_type": "user"
    }
  ],
  "managedOwners": [],
  "status": "active",
  "hashtags": [],
  "_references": [],
  "mentions": [],
  "keywords": [
    "christian conventions of wa inc",
    "common"
  ],
  "privacy": "secure",
  "triggers": [
    "content.create"
  ],
  "conditions": [
    "input.item._type == 'interaction'"
  ],
  "contacts": [],
  "teams": [],
  "integrations": [],
  "items": [],
  "styles": [],
  "realms": [
    {
      "_id": "5e82a7cd281d6602b698b483",
      "title": "Christian Conventions of WA Inc",
      "color": "#7f12b3",
      "bgColor": "#e7b3ff",
      "slug": "christian-conventions-of-wa-inc",
      "_type": "realm"
    },
    {
      "_id": "619376c2ac6eda000f1d32cb",
      "_type": "realm",
      "title": "Common",
      "slug": "realm-common",
      "bgColor": "#29AA5CFF",
      "color": "#FFFFFFFF"
    }
  ],
  "policies": [],
  "developmentMode": false,
  "tags": [],
  "actions": [
    {
      "conditions": [],
      "type": "email",
      "_id": "631743a89343af0026120628",
      "data": {
        "keys": [],
        "contacts": [
          {
            "_id": "5e97e0806a9f734dcdc940f1",
            "owners": [],
            "managedOwners": [],
            "realms": [
              "5e82a7cd281d6602b698b484",
              "6088c1cb87f82418764b7114",
              "5e97abd48beea3051136186f",
              "5e82a7cd281d6602b698b482",
              "5e82a7cd281d6602b698b486",
              "5e82a7ce281d6602b698b488",
              "5e82a7cd281d6602b698b485",
              "5e82a7ce281d6602b698b489",
              "5e82a7cd281d6602b698b483",
              "608a565b6eb42c090022c3fd",
              "608a56b56eb42c090022d259",
              "608a570bd9e05730879ce9c2",
              "606ecb8ec9c89661558d0bc1",
              "6215e2e8d7cc7c001956c492",
              "5e9d1bf79b953262c33e187f",
              "61f546264d66c70018d73006"
            ],
            "tags": [],
            "_type": "contact",
            "data": {
              "futureContact": "N",
              "import": {
                "Name for sorting": "Rae, Samuel",
                "Surname": "Rae",
                "First name": "Samuel",
                "Nametag": "Sam Rae",
                "Category": "0",
                "Future contact": "N",
                "Pending": "1",
                "Share?": "n",
                "Email": "samrae@gmail.com",
                "Email status": "0",
                "Wrong": "0",
                "Year of birth": "0",
                "Last update when": "16/07/15 17:55",
                "Last update who": "Teamlist web user",
                "Record #": "158980",
                "Member of": "pmc2015",
                "index": 9945,
                "Sex": "M",
                "Church denom name": "Baptist",
                "Church name": "Atwell Community Church",
                "Phone(m)": "043976319",
                "Street": "10 Radiance Link",
                "Suburb": "Atwell",
                "State": "WA",
                "Postcode": "6164",
                "DOB": "19/05/1982",
                "Info": "St Matthew's Uni Church",
                "Prefname": "Sam"
              }
            },
            "account": "5e82a7cd281d6602b698b481",
            "title": "Sam Rae"
          }
        ],
        "teams": [],
        "emailTemplate": null,
        "emailAddresses": [],
        "title": "Reaction Input",
        "htmlBody": "<h3>Input:</h3>\n<pre><%= JSON.stringify(get('input'), null, 2) %></pre>"
      },
      "deactivate": true
    },
    {
      "conditions": [],
      "type": "code",
      "_id": "622e24ad1ef900015ab2e328",
      "script": "/*\nGet the interaction ID\n*/\n\nlet inputType;\nlet interaction;\n\nif (input.trigger === 'manual.spark' && input.data._type === 'interaction') {\n    inputType = 'manualInteraction';\n    interaction = input.item._id;\n} else if (input.trigger === 'content.create' && input.data._type === 'interaction') {\n    inputType = 'autoInteraction';\n    interaction = input.item;\n} else {\n    inputType = 'unknown';\n}\n\n// Replace input with only the data we need\ninput = {\n    inputType,\n    interaction\n};\n\nreturn done(null, input);"
    },
    {
      "conditions": [
        "inputType == \"unknown\""
      ],
      "type": "stop",
      "_id": "622e24ad1ef900015ab2e329"
    },
    {
      "conditions": [],
      "type": "populate",
      "_id": "622e24ad1ef900015ab2e32a",
      "data": {
        "keys": [
          "interaction"
        ],
        "populateSelect": []
      }
    },
    {
      "conditions": [],
      "type": "populate",
      "_id": "622e24ad1ef900015ab2e32b",
      "data": {
        "keys": [
          "interaction.realms"
        ],
        "populateSelect": [
          "title",
          "data.shortTitle",
          "data.registrarEmail"
        ]
      }
    },
    {
      "conditions": [],
      "type": "code",
      "_id": "622e24ad1ef900015ab2e32c",
      "script": "/*\nExtract the data we need.\n*/\n\n// Load packages\nconst has = require('lodash/has');\n\n// Get interaction info\nconst { interaction } = input;\nconst interactionRealm = interaction.realms[0];\n\nconst formattedInteraction = {\n    _id: interaction._id,\n    definition: interaction.definition,\n    realm: {\n        title: interactionRealm.title,\n        shortTitle: interactionRealm.data.shortTitle,\n        email: interactionRealm.data.registrarEmail\n    }\n};\n\n// Get contact info\nlet primaryContact;\nconst secondaryContacts = {};\n\nif (!has(interaction.rawData, 'contact')) {\n    // If no contacts attached to this interaction, stop the Reaction\n    return done(null, 'STOP');\n}\n\n// Sanitises email addresses\n// - puts to lower case\n// - strips leading and trailing whitespace\nfunction sanitiseEmail(email) {\n    return email.toLowerCase().trim();\n}\n\n// Loop through all the contacts\nfor (let i = 0; i < interaction.rawData.contact.length; i += 1) {\n    const thisContactID = interaction.data.contact[i];\n    const thisContactData = interaction.rawData.contact[i];\n\n    // If the current contact has an email address, see if it matchces the primary contact\n    if (has(thisContactData, 'email')) {\n        // If primary contact, set primary contact data\n        if (sanitiseEmail(thisContactData.email) === sanitiseEmail(interaction.primaryEmail)) {\n            primaryContact = {\n                _id: thisContactID,\n                firstName: thisContactData.firstName,\n                lastName: thisContactData.lastName,\n                email: thisContactData.email\n            };\n        // If secondary contact, add to secondary contacts array\n        } else {\n            secondaryContacts[thisContactID] = {\n                _id: thisContactID,\n                firstName: thisContactData.firstName,\n                lastName: thisContactData.lastName,\n                email: thisContactData.email\n            };\n        }\n    }\n}\n\n// If no secondary contacts with email addresses\nif (Object.keys(secondaryContacts).length === 0) {\n    // Stop the Reaction, because it is not needed\n    return done(null, 'STOP');\n}\n\ninput = {\n    interaction: formattedInteraction,\n    primaryContact,\n    secondaryContacts\n};\n\nreturn done(null, input);",
      "deactivate": false
    },
    {
      "conditions": [],
      "type": "code",
      "_id": "621ca67897fa3e006288c52b",
      "script": "/*\nGet tickets related to this interaction\n*/\n\n// Set up results structures to return info to the next step]\nconst tickets = [];\n\n// Get input data needed\nconst interactionID = input.interaction._id;\n\n/*\nGET https://api.fluro.io/tickets/:connection/:connectionID\nDESCRIPTION\nReturns an array of all tickets connected to a specified content item.\n\nOptions are\n/tickets/interaction/<INTERACTIONID>\n/tickets/contact/<CONTACTID>\n/tickets/event/<EVENTID>\n*/\n$fluro.api.get(`/tickets/interaction/${interactionID}`)\n    .then((res) => {\n        for (let i = 0; i < res.data.length; i += 1) {\n            tickets.push(res.data[i]);\n        }\n    })\n    .catch((err) => done(err, 'STOP'));\n\n// Return results\ninput.tickets = tickets;\n\nreturn done(null, input);",
      "deactivate": false
    },
    {
      "conditions": [],
      "type": "code",
      "_id": "621ebff1245c8d0011340979",
      "script": "/*\nPut tickets under each contact\n*/\n\n// Load packages\nconst has = require('lodash/has');\n\nconst {\n    interaction,\n    primaryContact,\n    secondaryContacts,\n    tickets\n} = input;\n\n// If no tickets, stop the Reaction\nif (tickets.length < 1) {\n    return done(null, 'STOP');\n}\n\n// Put tickets under each contact\nfor (let i = 0; i < tickets.length; i += 1) {\n    // If the ticket is active and there is an associated event\n    if (tickets[i].status === 'active' && has(tickets[i], 'event')) {\n        // If the contact is a secondary contact\n        if (has(secondaryContacts, tickets[i].contact._id)) {\n            // If the contact does not already have a ticket array, create it\n            if (!has(secondaryContacts[tickets[i].contact._id], 'tickets')) {\n                secondaryContacts[tickets[i].contact._id].tickets = [];\n            }\n\n            // Add the ticket to the contact's ticket array\n            secondaryContacts[tickets[i].contact._id].tickets.push({\n                _id: tickets[i]._id,\n                title: tickets[i].title,\n                event: {\n                    _id: tickets[i].event._id,\n                    title: tickets[i].event.title,\n                    startDate: tickets[i].event.startDate,\n                    endDate: tickets[i].event.endDate\n                }\n            });\n        }\n    }\n}\n\n// Return the data\ninput = {\n    interaction,\n    primaryContact,\n    secondaryContacts\n};\n\nreturn done(null, input);"
    },
    {
      "conditions": [],
      "type": "code",
      "_id": "6217935f76a61400104245b8",
      "script": "/*\nEmail each extra attendee with ticket details\n*/\n\n// Load packages\nconst has = require('lodash/has');\nconst forEachOfSeries = require('async/forEachOfSeries');\n\n// Set up request headers\nconst headers = { 'Content-Type': 'application/json; charset=utf-8' };\n\n// Set up results structures to return info to the next step]\nconst results = [];\n\n// Get input data needed\nconst { interaction, primaryContact, secondaryContacts } = input;\n\nconst ticketURL = `http://tickets.fluro.io/interaction/${interaction._id}`;\nconst interactionURL = `https://app.fluro.io/list/interaction/${interaction.definition}/${interaction._id}/edit`;\n\n// Filter out Contacts with no tickets\nconst secondaryContactIDs = Object.keys(secondaryContacts);\nconst secondaryContactsWithTickets = {};\n\nfor (let i = 0; i < secondaryContactIDs.length; i += 1) {\n    if (has(secondaryContacts[secondaryContactIDs[i]], 'tickets')) {\n        secondaryContactsWithTickets[\n            secondaryContactIDs[i]\n        ] = secondaryContacts[\n            secondaryContactIDs[i]\n        ];\n    }\n}\n\n// Function to execute on each contact\nfunction emailTicketInfo(contact, index, next) {\n    let eventList = '';\n\n    for (let i = 0; i < contact.tickets.length; i += 1) {\n        const startDateObject = new Date(contact.tickets[i].event.startDate);\n        const startDateString = startDateObject.toLocaleString('en-AU', {\n            dateStyle: 'long',\n            timeStyle: 'short',\n            timeZone: 'Australia/Perth'\n        });\n\n        eventList = `\n            ${eventList}\n            <h3>${contact.tickets[i].event.title}</h3>\n            <p>${contact.tickets[i].title}</p>\n            <p>${startDateString}</p>`;\n    }\n\n    const emailBody = `\n        <div style='text-align: center;'>\n            <h1>${interaction.realm.shortTitle} check-in details</h1>\n            <hr/>\n            <img src='https://api.fluro.io/system/qr?input=${ticketURL}' style='border: 10px solid black; border-radius: 10px;' width='150px'/>\n            <h3>${contact.firstName} ${contact.lastName}</h3>\n            <p>${contact.email}</p>\n            <hr/>\n            ${eventList}\n            <hr/>\n        </div>\n        <div style='text-align: left;'>\n            <p>The payment receipt and full registration details have been sent to ${primaryContact.firstName} ${primaryContact.lastName} (${primaryContact.email}).</p>\n            <h4>Need help?</h4>\n            <p>Reply to this email, or contact us at <a href='mailto:${interaction.realm.email}?subject=${interaction.realm.title} enquiry'>${interaction.realm.email}.</p>\n            <hr/>\n            <p><small>Christian Conventions of Western Australia<br/>\n            ABN 38 223 904 915<br/></small></p>\n            <p style='color:#AAA;'><small>\n            Admin links: <a href='${interactionURL}'>Form submission</a></small></p>\n        </div>`;\n\n    const body = {\n        fromName: interaction.realm.title,\n        fromEmail: interaction.realm.email,\n        toEmails: contact.email,\n        subject: `${interaction.realm.shortTitle} check-in details`,\n        body: emailBody\n    };\n\n    const emailReactionID = '621dfa141b17ad02986c7d78';\n\n    // POST https://api.fluro.io/reaction/spark/:reactionID\n    $fluro.api.post(`/reaction/spark/${emailReactionID}`, body, headers)\n        .then((res) => {\n            results.push(res.data);\n            next();\n        })\n        .catch((err) => next(err));\n}\n\n// Callback function — after all iterations are finished\nfunction emailTicketInfoCallback(err) {\n    if (err) {\n        const errorMessage = $fluro.utils.errorMessage(err);\n        return done(errorMessage, 'STOP');\n    }\n\n    // Return results\n    return done(null, input);\n}\n\n// Run the async function\nreturn forEachOfSeries(\n    secondaryContactsWithTickets,\n    emailTicketInfo,\n    emailTicketInfoCallback\n);",
      "deactivate": false
    },
    {
      "conditions": [],
      "type": "stop",
      "_id": "6213941e791c2700122350cb"
    }
  ],
  "permissionSets": [
    {
      "realms": [
        {
          "_id": "5e82a7cd281d6602b698b483",
          "status": "active",
          "title": "Christian Conventions of WA Inc",
          "color": "#7f12b3",
          "bgColor": "#e7b3ff",
          "created": "2020-03-31T02:15:41.877Z",
          "updated": "2020-03-31T02:15:41.912Z",
          "slug": "christian-conventions-of-wa-inc",
          "_type": "realm"
        }
      ],
      "roles": [
        {
          "_id": "57f4640c461bb7401a858f77",
          "title": "Full Access",
          "_type": "role",
          "realms": [
            "54ebd2ef3a6e88a31bb68640"
          ],
          "status": "active",
          "updated": "2021-02-24T06:19:11.856Z",
          "created": "2016-10-05T02:23:08.750Z",
          "firstLine": "Grants access to Create, Edit, View and Delete almost every type of content in the system"
        }
      ]
    }
  ],
  "title": "Send check-in details to secondary contacts",
  "account": {
    "_id": "5e82a7cd281d6602b698b481",
    "status": "active",
    "title": "CCOWA",
    "countryCode": "AU",
    "timezone": "Australia/Perth"
  },
  "author": {
    "_id": "5eb14f76f4e2c15ffb9bf805",
    "firstName": "Sam",
    "lastName": "Rae",
    "name": "Sam Rae",
    "_type": "user"
  },
  "managedAuthor": null,
  "_type": "reaction",
  "updatedBy": "Sam Rae",
  "created": "2022-02-21T12:38:11.188Z",
  "updated": "2022-09-06T13:06:06.173Z",
  "tests": [
    {
      "_id": "622f45909e42760012594a98",
      "title": "Live form input",
      "json": "{\n    \"account\": \"5e82a7cd281d6602b698b481\",\n    \"user\": {\n        \"_id\": \"5eff0aa041a86b0cfbe961c5\",\n        \"accountType\": \"application\"\n    },\n    \"item\": \"622f3de19e42760012594a11\",\n    \"data\": {\n        \"_type\": \"interaction\",\n        \"definition\": \"testTicketing\",\n        \"submittedData\": {\n            \"title\": \"Test ticketing\",\n            \"data\": {\n                \"contact\": [\"5e97e0806a9f734dcdc940f1\", \"619ca4884de7ec000f03a8af\"]\n            },\n            \"realms\": [\"61f546264d66c70018d73006\"],\n            \"rawData\": {\n                \"contact\": [{\n                    \"firstName\": \"Sam\",\n                    \"lastName\": \"Rae\",\n                    \"gender\": \"male\",\n                    \"dob\": \"1982-05-19T00:00:00.000Z\",\n                    \"email\": \"samrae@gmail.com\",\n                    \"phoneNumber\": \"0439769319\"\n                }, {\n                    \"firstName\": \"Test\",\n                    \"lastName\": \"Person\",\n                    \"gender\": \"male\",\n                    \"dob\": \"1982-05-19T00:00:00.000Z\",\n                    \"email\": \"samrae+test@gmail.com\",\n                    \"phoneNumber\": \"0439769319\"\n                }]\n            },\n            \"connectionData\": {\n                \"ip\": {\n                    \"clientIp\": \"159.196.133.245\",\n                    \"clientIpRoutable\": true\n                }\n            },\n            \"applicationAuthor\": \"5eff0aa041a86b0cfbe961c5\",\n            \"account\": \"5e82a7cd281d6602b698b481\",\n            \"primaryEmail\": \"samrae@gmail.com\",\n            \"contact\": null,\n            \"contacts\": [\"5e97e0806a9f734dcdc940f1\", \"619ca4884de7ec000f03a8af\"],\n            \"attemptLog\": \"622f3ddc9e42760012594a05\",\n            \"mentions\": [],\n            \"hashtags\": [],\n            \"_type\": \"interaction\",\n            \"definition\": \"testTicketing\"\n        }\n    },\n    \"key\": \"content.create\",\n    \"trigger\": \"content.create\",\n    \"message\": \"Created Test ticketing\",\n    \"model\": \"interaction\"\n}",
      "testEmail": "sam@stalbans.org.au"
    },
    {
      "_id": "622f45909e42760012594a99",
      "title": "Manual Spark",
      "json": "{\n    \"trigger\": \"manual.spark\",\n    \"data\": {\n        \"_type\": \"interaction\",\n        \"definition\": \"testTicketing\"\n    },\n    \"item\": {\n        \"title\": \"Test ticketing\",\n        \"_type\": \"interaction\",\n        \"definition\": \"testTicketing\",\n        \"_id\": \"622f3de19e42760012594a11\"\n    }\n}",
      "testEmail": "sam@stalbans.org.au"
    }
  ],
  "apikey": "$2a$10$FoXQjqyymBjdV2Hxqh43ae4KH8LtfLih9d/3VQ0f1PLFRuhf6Fut.",
  "data": {},
  "statDates": {
    "view": "2022-02-24T09:37:05.375Z"
  },
  "stats": {
    "view": 1
  }
}