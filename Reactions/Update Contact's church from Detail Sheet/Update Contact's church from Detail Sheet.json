{
  "_id": "61f7c2afd6934a0011d8a8d0",
  "apikey_unique": {
    "type": "Point",
    "coordinates": [
      0,
      0
    ]
  },
  "owners": [
    {
      "_id": "5eb14f76f4e2c15ffb9bf805",
      "firstName": "Sam",
      "lastName": "Rae",
      "name": "Sam Rae",
      "_type": "user"
    }
  ],
  "managedOwners": [],
  "status": "active",
  "hashtags": [],
  "_references": [],
  "mentions": [],
  "keywords": [
    "christian conventions of wa inc"
  ],
  "privacy": "secure",
  "triggers": [
    "content.create",
    "content.edit"
  ],
  "conditions": [
    "input.item._type == 'interaction' || input.item._type == 'contactdetail'"
  ],
  "contacts": [],
  "teams": [],
  "integrations": [],
  "items": [],
  "styles": [],
  "realms": [
    {
      "_id": "5e82a7cd281d6602b698b483",
      "title": "Christian Conventions of WA Inc",
      "color": "#7f12b3",
      "bgColor": "#e7b3ff",
      "slug": "christian-conventions-of-wa-inc",
      "_type": "realm"
    }
  ],
  "policies": [],
  "developmentMode": false,
  "tags": [],
  "actions": [
    {
      "conditions": [],
      "type": "emailaddress",
      "_id": "631602ff1195340025b6ae3b",
      "data": {
        "keys": [],
        "emailAddresses": [
          "samrae@gmail.com"
        ],
        "emailTemplate": null,
        "htmlBody": "<h3>Input:</h3>\n<pre><%= JSON.stringify(get('input'), null, 2) %></pre>",
        "title": "Input",
        "senderName": "CCOWA",
        "sender": ""
      },
      "deactivate": true
    },
    {
      "conditions": [],
      "type": "code",
      "_id": "61ffdaf2c4ed611bd313f8bd",
      "script": "/*\nThis Reaction removes a Contact from previous churches\n(Groups) and adds them to their current church as defined\nby their current churchDetails detail sheet.\n\nIt sparks automatically:\n- on form submissions (Interactions)\n  When registration forms are submitted with an attached\n  detail sheet, the detail sheet is updated by Fluro,\n  and then this Reaction picks up the data from the detail\n  sheet (not from the form data itself)\n- on creation or editing of a churchDetails details sheet\n\nIt can be sparked manually on:\n- churchDetails detail sheets\n\nInfo:\n- This doesn't actually use any information from the form submission apart from the contact IDs.\nAll the detail sheet information is picked up from the current detail sheet as it is in Fluro.\n\n*/\n\n/*\nVerify input\n*/\n\nlet inputType;\nlet item;\n\n// Check what sort of input we have\nif (input.item.definition === 'churchDetails' || input.model === 'contactdetail') {\n    inputType = 'detailSheet';\n    item = input.item;\n} else if (input.data._type === 'interaction') {\n    inputType = 'interaction';\n    item = input.item._id;\n} else {\n    inputType = 'unknown';\n}\n\ninput = { inputType, item };\n// input.inputType = inputType;\n// input.item = item;\n\nreturn done(null, input);",
      "deactivate": false
    },
    {
      "conditions": [],
      "type": "populate",
      "_id": "63160aa7efb594002619d8aa",
      "data": {
        "keys": [
          "item"
        ],
        "populateSelect": [
          "definition",
          "contacts",
          "contact"
        ]
      }
    },
    {
      "conditions": [],
      "type": "code",
      "_id": "6200b11fe7912201934f214c",
      "script": "/*\nFormat data based on what it is\n*/\n\n// Load packages\nconst has = require('lodash/has');\n\n// Get data from input\nconst { inputType, item } = input;\nlet contacts = [];\nlet definition;\nlet interactionID;\n\n// If input is a detail sheet\nif (input.inputType === 'detailSheet') {\n    contacts.push(item.contact);\n\n// If input is an Interaction\n} else if (input.inputType === 'interaction') {\n    // If there are no contacts, stop the Reaction\n    if (!has(item, 'contacts')) return done(null, 'STOP');\n\n    contacts = item.contacts;\n    definition = item.definition;\n    interactionID = item._id;\n}\n\n// If no contacts, stop the Reaction\nif (contacts.length === 0) return done(null, 'STOP');\n\n// Replace input with only the data we need\ninput = {\n    inputType,\n    definition,\n    interactionID,\n    contacts\n};\n\n// Finish the action and send the input to the next action\n\nreturn done(null, input);"
    },
    {
      "conditions": [],
      "type": "load",
      "_id": "620a85855bbc940013e6747f",
      "data": {
        "keys": [
          "contacts"
        ],
        "type": "contact.detail",
        "key": "detailSheets"
      }
    },
    {
      "conditions": [],
      "type": "code",
      "_id": "61fa51582c74c100170a6a0c",
      "script": "/*\nExtract data from detail sheets that we need, clear the rest\n*/\n\n// Load packages\nconst has = require('lodash/has');\n\n// Get input\nconst { inputType, definition, interactionID, detailSheets, contacts } = input;\nconst contactsAndChurches = {};\n\n// If no detail sheets attached to the contact, stop the Reaction\nif(detailSheets.length == 0) return done(null, 'STOP');\n\nfor (let i = 0; i < detailSheets.length; i += 1) {\n    // Filter out all the non-churchDetails sheets inactive church detail sheets\n    if (detailSheets[i].definition === 'churchDetails' && detailSheets[i].status === 'active') {\n        contactsAndChurches[detailSheets[i].contact] = {\n            contact: detailSheets[i].contact,\n            detailSheet: detailSheets[i]._id,\n            attendsChurch: detailSheets[i].data.attendsChurch\n        };\n\n        if (has(detailSheets[i].data, 'churchAttending')) {\n            if (detailSheets[i].data.churchAttending != null) {\n                if (has(detailSheets[i].data.churchAttending, '_id')) {\n                    // In case churchAttending is an object with an ID\n                    contactsAndChurches[detailSheets[i].contact]\n                        .churchOnDetailSheet = detailSheets[i].data.churchAttending._id;\n                } else {\n                    // In case churchAttending is a string containing the ID\n                    contactsAndChurches[detailSheets[i].contact]\n                        .churchOnDetailSheet = detailSheets[i].data.churchAttending;\n                }\n            }\n        }\n        if (has(detailSheets[i].data, 'churchNotListedName') && has(detailSheets[i].data, 'churchIsNotListed')) {\n            if (detailSheets[i].data.churchIsNotListed === true) {\n                contactsAndChurches[detailSheets[i].contact]\n                    .churchIsNotListed = detailSheets[i].data.churchIsNotListed;\n                contactsAndChurches[detailSheets[i].contact]\n                    .churchNotListedName = detailSheets[i].data.churchNotListedName;\n            }\n        }\n    }\n}\n\n// Clear the input and put back what we want\ninput = {\n    inputType,\n    definition,\n    interactionID,\n    contacts,\n    contactsAndChurches\n};\n\nreturn done(null, input);"
    },
    {
      "conditions": [],
      "type": "code",
      "_id": "63161cdce9778900266ee7b6",
      "script": "/*\nRemove contacts from the contact array if they don't have detail sheets attached\n*/\n\n// Load packages\nconst has = require('lodash/has');\n\n// Get input data needed\nconst { inputType, definition, interactionID, contacts, contactsAndChurches } = input;\nconst contactsWithoutDetailSheets = [];\n\n// Copy contact IDs without detail sheets to new array\nfor (let i = 0; i < contacts.length; i += 1) {\n    if(!has(contactsAndChurches, contacts[i])) {\n        contactsWithoutDetailSheets.push(contacts[i]);\n    }\n}\n// Remove contact IDs without detail sheets from contact array\nfor (let i = 0; i < contactsWithoutDetailSheets.length; i += 1) {\n    contacts.pop(contactsWithoutDetailSheets[i]);  \n}\n\n// Replace input with only the data we need\ninput = {\n    inputType,\n    definition,\n    interactionID,\n    contacts,\n    contactsWithoutDetailSheets,\n    contactsAndChurches\n};\n\n// Finish the action and send the input to the next action\nreturn done(null, input);"
    },
    {
      "conditions": [
        "inputType == \"interaction\"",
        "contactsWithoutDetailSheets.length > 0"
      ],
      "type": "emailaddress",
      "_id": "63161cdce9778900266ee7b7",
      "data": {
        "keys": [],
        "emailAddresses": [
          "samrae@gmail.com"
        ],
        "emailTemplate": null,
        "title": "Contacts without detail sheets",
        "htmlBody": "<h1>Contacts without detail sheets</h1>\n<p>Some contacts on a form submission have detail sheets, while others do not.</p>\n<p>You might want to check why these contacts don't have detail sheets:</p>\n\n<!-- Loop through each item in the array -->\n<ul>\n    <% for(var i = 0; i < get('input.contactsWithoutDetailSheets.length'); i++) { %>\n        <li><a href=\"https://app.fluro.io/list/contact/<%= get('input.contactsWithoutDetailSheets[' + i +']') %>/edit\"><code><%= get('input.contactsWithoutDetailSheets[' + i +']') %></code></a></li>\n    <% } %>\n</ul>\n\n<hr>\n\n<% \nconst definition = get('input.definition');\nconst interactionID = get('input.interactionID'); \n%>\n\n<p>Links: <a href=\"https://app.fluro.io/list/interaction/<%= definition %>/<%= interactionID %>/edit\">Form submission</a></p>"
      }
    },
    {
      "conditions": [],
      "type": "code",
      "_id": "620a85855bbc940013e67481",
      "script": "/*\nFor contacts that say their church is not listed,\nfind exact matches for churches that already exist\n*/\n\n// Load packages\nconst has = require('lodash/has');\nconst forEachOfSeries = require('async/forEachOfSeries');\n\n// Set up request headers\nconst headers = { 'Content-Type': 'application/json; charset=utf-8' };\n\n// Get input data needed\nconst { contacts, contactsAndChurches } = input;\n\n// Build an array of new churches and contacts to process\nconst newChurchNamesAndContacts = {};\n\n// Loop through contacts\nfor (let i = 0; i < contacts.length; i += 1) {\n    // If contact has said their church is not listed\n    if (contactsAndChurches[contacts[i]].churchIsNotListed) {\n        const newChurch = {};\n        const newChurchName = contactsAndChurches[contacts[i]].churchNotListedName;\n        const contactsToAdd = [];\n        const contactToAdd = contactsAndChurches[contacts[i]].contact;\n\n        // If church name is not in the array already\n        if (!has(newChurchNamesAndContacts, newChurchName)) {\n            // Add the church name and contact to the list\n            contactsToAdd.push(contactToAdd);\n\n            newChurch.newChurchName = newChurchName;\n            newChurch.contacts = contactsToAdd;\n\n            newChurchNamesAndContacts[newChurchName] = newChurch;\n        } else {\n            // The church name is already in the list\n            // Add the contact to the array\n            newChurchNamesAndContacts[newChurchName].contacts.push(contactToAdd);\n        }\n    }\n}\n\nfunction searchForChurch({ newChurchName, contacts: contactsList }, index, next) {\n    const body = {\n        filter:\n        {\n            filters: [\n                {\n                    key: 'title', // The field to filter on\n                    comparator: 'in', // The comparator to use\n                    values: [ // Multiple values to check\n                        newChurchName\n                    ]\n                }\n            ]\n        }\n    };\n\n    // POST https://api.fluro.io/content/:type/filter\n    $fluro.api.post('/content/church/filter', body, headers)\n        .then((res) => {\n            // If any data is returned\n            if (res.data.length > 0) {\n                // Add the matched church to the contacts\n                for (let i = 0; i < contactsList.length; i += 1) {\n                    const thisContact = contactsList[i];\n                    contactsAndChurches[thisContact].exactMatchChurch = res.data[0]._id;\n                }\n\n                // Remove the matched church from the list of new churches\n                for (let i = 0; i < newChurchNamesAndContacts; i += 1) {\n                    if (newChurchNamesAndContacts[i].toLowerCase()\n                        === res.data[0].title.toLowerCase()) {\n                        newChurchNamesAndContacts.splice(i, 1);\n                    }\n                }\n            }\n\n            next();\n        })\n        .catch((err) => next(err));\n}\n\n// Callback function — after all iterations are finished\nfunction searchForChurchCallback(err) {\n    if (err) {\n        const errorMessage = $fluro.utils.errorMessage(err);\n        return done(errorMessage, 'STOP');\n    }\n\n    // Return results\n    return done(null, input);\n}\n\n// Run the async function\nreturn forEachOfSeries(newChurchNamesAndContacts, searchForChurch, searchForChurchCallback);",
      "deactivate": false
    },
    {
      "conditions": [],
      "type": "code",
      "_id": "620a85855bbc940013e67482",
      "script": "/*\nIf there's an exact match, update the detail sheet to point to the matched church\n*/\n\n// Load packages\nconst has = require('lodash/has');\nconst forEachOfSeries = require('async/forEachOfSeries');\n\n// Set up request headers\nconst headers = { 'Content-Type': 'application/json; charset=utf-8' };\n\n// Set up results structures to return info to the next step\nconst updatedDetailSheets = [];\n\n// Get input data needed\nconst { contacts, contactsAndChurches } = input;\n\n// Build an array of detail sheets to update\nconst detailSheetsToUpdate = [];\n\n// Loop through contacts\nfor (let i = 0; i < contacts.length; i += 1) {\n    // If we've just found the church for the contact\n    const thisContactAndChurches = contactsAndChurches[contacts[i]];\n\n    if (has(thisContactAndChurches, 'exactMatchChurch')) {\n        // Add the contact, detail sheet, and church to an array to process\n        detailSheetsToUpdate.push({\n            contact: contacts[i],\n            detailSheet: thisContactAndChurches.detailSheet,\n            exactMatchChurch: thisContactAndChurches.exactMatchChurch\n        });\n    }\n}\n\nfunction updateDetailSheet({ contact, detailSheet, exactMatchChurch }, index, next) {\n    const body = {\n        data: {\n            churchIsNotListed: false,\n            churchAttending: {\n                _id: exactMatchChurch\n            }\n        }\n    };\n\n    // PUT https://api.fluro.io/content/:type/:id\n    $fluro.api.put(`/content/churchDetails/${detailSheet}`, body, headers)\n        .then((res) => {\n            if (res.data.length > 0) { // If any data is returned\n                updatedDetailSheets.push(res.data[0]);\n            }\n\n            contactsAndChurches[contact]\n                .churchOnDetailSheet = exactMatchChurch;\n\n            next();\n        })\n        .catch((err) => next(err));\n}\n\n// Callback function — after all iterations are finished\nfunction updateDetailSheetCallback(err) {\n    if (err) {\n        const errorMessage = $fluro.utils.errorMessage(err);\n        return done(errorMessage, 'STOP');\n    }\n\n    return done(null, input);\n}\n\n// Run the async function\nreturn forEachOfSeries(detailSheetsToUpdate, updateDetailSheet, updateDetailSheetCallback);"
    },
    {
      "conditions": [],
      "type": "code",
      "_id": "6224a0c4e1c32a0012bc2b24",
      "script": "/*\nRetrieve titles for the churches on the detail sheets\n*/\n\n// Load packages\nconst has = require('lodash/has');\nconst forEachOfSeries = require('async/forEachOfSeries');\n\n// Get input data needed\nconst { contacts, contactsAndChurches } = input;\n\n// Build an array of contacts and churches to look up\nconst contactsAndChurchesToLookUp = [];\n\n// Loop through contacts\nfor (let i = 0; i < contacts.length; i += 1) {\n    const thisContactAndChurch = contactsAndChurches[contacts[i]];\n\n    // If there's a church reference on the detail sheet\n    if (has(thisContactAndChurch, 'churchOnDetailSheet')) {\n        // Add the contact and church ID to an array to process\n        contactsAndChurchesToLookUp.push({\n            contact: contacts[i],\n            church: thisContactAndChurch.churchOnDetailSheet\n        });\n    }\n}\n\nfunction lookUpChurchTitle({ contact, church }, index, next) {\n    const thisContactAndChurch = contactsAndChurches[contact];\n\n    // GET https://api.fluro.io/content/get/:id\n    $fluro.api.get(`/content/get/${church}`)\n        .then((res) => {\n            thisContactAndChurch.churchOnDetailSheetTitle = res.data.title;\n\n            next();\n        })\n        .catch((err) => next(err));\n}\n\n// Callback function — after all iterations are finished\nfunction lookUpChurchTitleCallback(err) {\n    if (err) {\n        const errorMessage = $fluro.utils.errorMessage(err);\n        return done(errorMessage, 'STOP');\n    }\n\n    input.contactsAndChurches = contactsAndChurches;\n\n    return done(null, input);\n}\n\n// Run the async functions\nreturn forEachOfSeries(\n    contactsAndChurchesToLookUp,\n    lookUpChurchTitle,\n    lookUpChurchTitleCallback\n);",
      "deactivate": false
    },
    {
      "conditions": [],
      "type": "code",
      "_id": "6224a0c4e1c32a0012bc2b25",
      "script": "/*\nUpdate detail sheets to include a plain text church title\n*/\n\n// Load packages\nconst has = require('lodash/has');\nconst forEachOfSeries = require('async/forEachOfSeries');\n\n// Set up request headers\nconst headers = { 'Content-Type': 'application/json; charset=utf-8' };\n\n// Get input data needed\nconst { contacts, contactsAndChurches } = input;\n\n// Build an array of detail sheets to update\nconst detailSheetsToUpdate = [];\n\n// Loop through contacts\nfor (let i = 0; i < contacts.length; i += 1) {\n    const thisContact = contactsAndChurches[contacts[i]];\n\n    // If the church title has been retrieved\n    if (has(thisContact, 'churchOnDetailSheetTitle')) {\n        // Add the detail sheet, and church to an array to process\n        detailSheetsToUpdate.push({\n            detailSheet: thisContact.detailSheet,\n            church: thisContact.churchOnDetailSheetTitle\n        });\n    }\n}\n\nfunction updateDetailSheet(detailSheetToUpdate, index, next) {\n    const body = {\n        data: {\n            churchAttendingTitle: detailSheetToUpdate.church\n        }\n    };\n\n    // PUT https://api.fluro.io/content/:type/:id\n    $fluro.api.put(`/content/churchDetails/${detailSheetToUpdate.detailSheet}`, body, headers)\n        .then(() => next())\n        .catch((err) => next(err));\n}\n\n// Callback function — after all iterations are finished\nfunction updateDetailSheetCallback(err) {\n    if (err) {\n        const errorMessage = $fluro.utils.errorMessage(err);\n        return done(errorMessage, 'STOP');\n    }\n\n    // Return results\n    return done(null, input);\n}\n\n// Run the async function\nreturn forEachOfSeries(detailSheetsToUpdate, updateDetailSheet, updateDetailSheetCallback);"
    },
    {
      "conditions": [],
      "type": "code",
      "_id": "620a85855bbc940013e67483",
      "script": "/*\nFor contacts that say their church is not listed,\nand an exact match was not found,\nfind fuzzy matches for churches that already exist\n*/\n\n// Load packages\nconst has = require('lodash/has');\nconst forEachOfSeries = require('async/forEachOfSeries');\n\n// Set up request headers\nconst headers = { 'Content-Type': 'application/json; charset=utf-8' };\n\n// Set up results structures to return info to the next step\nlet newChurchesHaveBeenSubmitted = false;\n\n// Get input data needed\nconst { contacts, contactsAndChurches } = input;\n\n// Build an array of new churches and contacts to process\nconst newChurchNamesAndContacts = {};\n\n// Loop through contacts\nfor (let i = 0; i < contacts.length; i += 1) {\n    const thisContactAndChurch = contactsAndChurches[contacts[i]];\n\n    // If contact has said their church is not listed …\n    if (thisContactAndChurch.churchIsNotListed\n    // AND an exact match has not been found\n    && !has(thisContactAndChurch, 'exactMatchChurch')\n    // AND the unlisted church name is not blank\n    && thisContactAndChurch.churchNotListedName !== '') {\n        newChurchesHaveBeenSubmitted = true;\n\n        const newChurch = {};\n        const newChurchName = thisContactAndChurch.churchNotListedName;\n        const contactsToAdd = [];\n        const contactToAdd = thisContactAndChurch.contact;\n\n        // If church name is not in the array already\n        if (!has(newChurchNamesAndContacts, newChurchName)) {\n            // Add the church name and contact to the list\n            newChurch.newChurchName = newChurchName;\n            contactsToAdd.push(contactToAdd);\n            newChurch.contacts = contactsToAdd;\n\n            newChurchNamesAndContacts[newChurchName] = newChurch;\n        } else {\n            // The church name is already in the list\n            // Add the contact to the array\n            newChurchNamesAndContacts[newChurchName].contacts.push(contactToAdd);\n        }\n    }\n}\n\n// Fuzzy search for church name\nfunction searchForChurch(newChurchNameAndContacts, index, next) {\n    const body = {\n        search: newChurchNameAndContacts.newChurchName\n    };\n\n    // POST https://api.fluro.io/content/:type/filter\n    $fluro.api.post('/content/church/filter', body, headers)\n        .then((res) => {\n            // If any data is returned\n            if (res.data.length > 0) {\n                // Add the fuzzy matched churches to the contacts\n                for (let i = 0; i < newChurchNameAndContacts.contacts.length; i += 1) {\n                    contactsAndChurches[newChurchNameAndContacts.contacts[i]]\n                        .fuzzyMatchedChurches = res.data;\n                }\n            }\n\n            next();\n        })\n        .catch((err) => next(err));\n}\n\n// Callback function — after all iterations are finished\nfunction searchForChurchCallback(err) {\n    if (err) {\n        const errorMessage = $fluro.utils.errorMessage(err);\n        return done(errorMessage, 'STOP');\n    }\n\n    // Return results\n    input.newChurchesHaveBeenSubmitted = newChurchesHaveBeenSubmitted;\n    return done(null, input);\n}\n\n// Run the async function\nreturn forEachOfSeries(newChurchNamesAndContacts, searchForChurch, searchForChurchCallback);"
    },
    {
      "conditions": [
        "newChurchesHaveBeenSubmitted"
      ],
      "type": "email",
      "_id": "620a85855bbc940013e67484",
      "data": {
        "keys": [],
        "contacts": [
          {
            "_id": "5e97e0806a9f734dcdc940f1",
            "owners": [],
            "managedOwners": [],
            "realms": [
              "5e82a7cd281d6602b698b484",
              "6088c1cb87f82418764b7114",
              "5e97abd48beea3051136186f",
              "5e82a7cd281d6602b698b482",
              "5e82a7cd281d6602b698b486",
              "5e82a7ce281d6602b698b488",
              "5e82a7cd281d6602b698b485",
              "5e82a7ce281d6602b698b489",
              "5e82a7cd281d6602b698b483",
              "608a565b6eb42c090022c3fd",
              "608a56b56eb42c090022d259",
              "608a570bd9e05730879ce9c2",
              "606ecb8ec9c89661558d0bc1",
              "6215e2e8d7cc7c001956c492",
              "5e9d1bf79b953262c33e187f",
              "61f546264d66c70018d73006",
              "6405ea7fa6acd80034248f5c"
            ],
            "tags": [],
            "_type": "contact",
            "data": {
              "futureContact": "N",
              "import": {
                "index": 9945,
                "nameForSorting": "Rae, Samuel",
                "surname": "Rae",
                "firstName": "Samuel",
                "nametag": "Sam Rae",
                "category": "0",
                "futureContact": "N",
                "pending": "1",
                "share": "n",
                "email": "samrae@gmail.com",
                "emailStatus": "0",
                "wrong": "0",
                "yearOfBirth": "0",
                "lastUpdateWhen": "16/07/15 17:55",
                "lastUpdateWho": "Teamlist web user",
                "record": "158980",
                "memberOf": "pmc2015",
                "sex": "M",
                "churchDenomName": "Baptist",
                "churchName": "Atwell Community Church",
                "phoneM": "043976319",
                "street": "10 Radiance Link",
                "suburb": "Atwell",
                "state": "WA",
                "postcode": "6164",
                "dob": "19/05/1982",
                "info": "St Matthew's Uni Church",
                "prefname": "Sam"
              }
            },
            "account": "5e82a7cd281d6602b698b481",
            "title": "Sam Rae"
          },
          {
            "_id": "5e97d9ca6a9f734dcdc920e1",
            "owners": [],
            "managedOwners": [],
            "realms": [
              "5e97abd48beea3051136186f",
              "5e82a7cd281d6602b698b482",
              "5e82a7cd281d6602b698b486",
              "5e82a7ce281d6602b698b488",
              "606ecb8ec9c89661558d0bc1",
              "608a570bd9e05730879ce9c2",
              "6088c1cb87f82418764b7114",
              "5e82a7ce281d6602b698b489",
              "5e9d1c929b953262c33e24da",
              "5e82a7cd281d6602b698b484",
              "608a565b6eb42c090022c3fd",
              "6405ea7fa6acd80034248f5c",
              "6405eaede0fd77003424f863"
            ],
            "tags": [],
            "_type": "contact",
            "data": {
              "futureContact": "Y",
              "import": {
                "Name for sorting": "Metcalf, Chris",
                "Surname": "Metcalf",
                "First name": "Chris",
                "Nametag": "Chris Metcalf",
                "Sex": "M",
                "Category": "0",
                "Church denom name": "Baptist",
                "Church name": "North Beach Baptist Church",
                "Future contact": "Y",
                "Pending": "1",
                "Share?": "n",
                "Phone(m)": "410895019",
                "Email": "chris.metcalf8@gmail.com",
                "Email status": "0",
                "Info": "catering helper",
                "Street": "12 Groat St",
                "Suburb": "North Beach",
                "State": "WA",
                "Postcode": "6020",
                "Wrong": "0",
                "DOB": "17/04/1989",
                "Year of birth": "0",
                "Last update when": "03/10/16 08:43",
                "Last update who": "Matt Harding",
                "Record #": "201576",
                "Member of": "exalt2016bc exalt2016th exalt2016",
                "index": 8143,
                "Prefname": "Chris"
              }
            },
            "account": "5e82a7cd281d6602b698b481",
            "title": "Chris Metcalf"
          }
        ],
        "teams": [],
        "emailTemplate": null,
        "title": "Church not listed",
        "htmlBody": "<!-- Send email to admins to tell them that someone says their church is unlisted -->\n\n<h3>The following detail sheets have been updated with a church that does not exist in our list.</h3>\n\n<%\n    // Load packages\n    const has = Object.prototype.hasOwnProperty;\n    \n    // Get input data needed\n    const input = get('input');\n    const { contacts, contactsAndChurches } = input;\n    \n    for(let i = 0; i < contacts.length; i += 1) {\n        const thisContactAndChurch = contactsAndChurches[contacts[i]];\n\n        if (thisContactAndChurch.churchIsNotListed\n        && thisContactAndChurch.churchNotListedName !== '') {\n            let churchNotListedName = thisContactAndChurch.churchNotListedName;\n            const detailSheet = thisContactAndChurch.detailSheet;\n\n            %>\n            <hr/>\n            <h4>Detail Sheet: <code><a href=\"https://app.fluro.io/list/contactdetail/churchDetails/<%= detailSheet %>/edit\"><%=detailSheet%></a></code></h4>\n            <h4>Church name: <code><%= churchNotListedName %></code></h4>\n            <%\n            if (has.call(thisContactAndChurch, 'fuzzyMatchedChurches')) {\n                let churchNotListedName = thisContactAndChurch.churchNotListedName;\n                %>\n                \n                <p>Here are some existing churches with similar names:</p>\n                <ul>\n                    <%\n                    const fuzzyMatchedChurches = thisContactAndChurch.fuzzyMatchedChurches;\n\n                    for (let j = 0; j < fuzzyMatchedChurches.length; j += 1) {%>\n                        <li><%= fuzzyMatchedChurches[j].title %></li>\n                    <%\n                    } \n                    %>\n                </ul>\n                <%\n            }\n        }\n    }\n%>\n<hr/>\n<p>Please manually check the detail sheets and either select the correct church, or create a new church and select it. \n    New churches will need to be added to live forms as available churches to choose from.</p>\n"
      },
      "deactivate": false
    },
    {
      "conditions": [],
      "type": "code",
      "_id": "620a85855bbc940013e67485",
      "script": "/*\nNOT CURRENTLY FUNCTIONAL\n\nCreate new churches if necessary\n*/\n\n// // Load packages\n// const has = require('lodash/has');\n// const forEachOfSeries = require('async/forEachOfSeries');\n\n// // Set up request headers\n// const headers = { 'Content-Type': 'application/json; charset=utf-8' };\n\n// // Get input data needed\n// const { contacts, contactsAndChurches } = input;\n\n// // Build an array of new churches and contacts to process\n// const newChurchNamesAndContacts = {};\n\n// // Loop through contacts\n// for (let i = 0; i < contacts.length; i += 1) {\n//     const thisContactAndChurch = contactsAndChurches[contacts[i]];\n\n//     // If contact has said their church is not listed\n//     if (has(thisContactAndChurch 'churchNotListedName')) {\n//         const newChurch = {};\n//         const newChurchName = thisContactAndChurch.churchNotListedName;\n//         const contactsToAdd = [];\n//         const contactToAdd = thisContactAndChurch.contact;\n\n//         // If church name is not in the array already\n//         if (!has(newChurchNamesAndContacts, newChurchName)) {\n//             // Add the church name and contact to the list\n//             newChurch.newChurchName = newChurchName;\n//             contactsToAdd.push(contactToAdd);\n//             newChurch.contacts = contactsToAdd;\n\n//             newChurchNamesAndContacts[newChurchName] = newChurch;\n//         } else {\n//             // The church name is already in the list\n//             // Add the contact to the array\n//             newChurchNamesAndContacts[newChurchName].contacts.push(contactToAdd);\n//         }\n//     }\n// }\n\n// input.newChurchNamesAndContacts = newChurchNamesAndContacts;\n\n// function searchForChurch(newChurchNameAndContacts, index, next) {\n//     const body = {\n//         filter: {\n//             filters: [{\n//                 key: 'title', // The field to filter on\n//                 comparator: 'in', // The comparator to use\n//                 values: [ // Multiple values to check\n//                     newChurchNameAndContacts.newChurchName\n//                 ]\n//             }]\n//         }\n//     };\n\n//     // POST https://api.fluro.io/content/:type/filter\n//     $fluro.api.post('/content/church/filter', body, headers)\n//         .then((res) => {\n//             // If any data is returned\n//             if (res.data.length > 0) {\n//                 for (let i = 0; i < newChurchNameAndContacts.contacts.length; i += 1) {\n//                     contactsAndChurches[newChurchNameAndContacts.contacts[i]]\n//                         .foundChurch = res.data[0]._id;\n//                 }\n\n//                 /* foundChurches.push({\n//                     'foundChurchName': res.data[0].title,\n//                     'foundChurch': res.data[0]._id,\n//                     'contacts': newChurchNameAndContacts.contacts\n//                 }); */\n//             }\n\n//             next();\n//         })\n//         .catch((err) => next(err));\n// }\n\n// // Callback function — after all iterations are finished\n// function searchForChurchCallback(err) {\n//     if (err) {\n//         const errorMessage = $fluro.utils.errorMessage(err);\n//         return done(errorMessage, 'STOP');\n//     }\n\n//     // Return results\n//     // input.foundChurches = foundChurches;\n\n//     return done(null, input);\n// }\n\n// // Function to execute on each contact\n// function createChurch(newChurchName, index, next) {\n//     const body = {\n//         // 'definition': 'church',\n//         title: newChurchName,\n//         realms: ['61f546264d66c70018d73006']\n//     };\n\n//     // https://api.fluro.io/content/:type\n//     $fluro.api.post('/content/church', body, headers)\n//         .then((res) => {\n//             createdNewChurch.push(Object.keys(res)); /* newChurchName */\n\n//             next();\n//         })\n//         .catch((err) => next(err));\n// }\n\n// // Callback function — after all iterations are finished\n// function createChurchCallback(err) {\n//     if (err) {\n//         const errorMessage = $fluro.utils.errorMessage(err);\n//         return done(errorMessage, 'STOP');\n//     }\n\n//     // Return results\n//     input.newChurchNamesToCreate = newChurchNamesToCreate;\n//     input.createdNewChurch = createdNewChurch;\n//     return done(null, input);\n// }\n\n// // Run the async function\n// return async.forEachOfSeries(newChurchNamesAndContacts,\n// searchForChurch, searchForChurchCallback);\n\n// // return forEachOfSeries(newChurchNamesToCreate, createChurch, createChurchCallback);",
      "deactivate": true
    },
    {
      "conditions": [],
      "type": "code",
      "_id": "61fa51582c74c100170a6a0d",
      "data": {
        "query": {
          "_id": "61fa18a9012272001097eb59",
          "owners": [
            "5eb14f76f4e2c15ffb9bf805"
          ],
          "managedOwners": [
            "5eb14f10ff872a540dbbbe16"
          ],
          "realms": [
            "5e82a7cd281d6602b698b483"
          ],
          "tags": [],
          "title": "Get churches that contact is in",
          "account": "5e82a7cd281d6602b698b481",
          "author": "5eb14f76f4e2c15ffb9bf805",
          "managedAuthor": "5eb14f10ff872a540dbbbe16",
          "_type": "query",
          "data": {}
        },
        "key": "contactGroups"
      },
      "script": "/*\nLoad the churches that each contact is in\n*/\n\n// Load packages\nconst forEachOfSeries = require('async/forEachOfSeries');\n\n// Set up request headers\nconst headers = { 'Content-Type': 'application/json; charset=utf-8' };\n\n// Get input data needed\nconst { contacts, contactsAndChurches } = input;\n\n// Function to execute on each contact\nfunction listGroups({ contact }, index, next) {\n    const body = {\n        _type: 'team',\n        status: 'active',\n        definition: 'church',\n        provisionalMembers: contact\n    };\n\n    // https://api.fluro.io/content/_query\n    $fluro.api.post('/content/_query/?select=title _id', body, headers)\n        .then((res) => {\n            const churches = [];\n\n            // Construct an array of churches\n            for (let i = 0; i < res.data.length; i += 1) {\n                churches.push(res.data[i]._id);\n            }\n            contactsAndChurches[contact].churches = churches;\n            next();\n        })\n        .catch((err) => next(err));\n}\n\n// Callback function — after all iterations are finished\nfunction listGroupsCallback(err) {\n    if (err) {\n        const errorMessage = $fluro.utils.errorMessage(err);\n        return done(errorMessage, 'STOP');\n    }\n\n    // Replace input with updated data\n    input = {\n        contacts,\n        contactsAndChurches\n    };\n\n    return done(null, input);\n}\n\n// Run the async function\nreturn forEachOfSeries(contactsAndChurches, listGroups, listGroupsCallback);",
      "deactivate": false
    },
    {
      "conditions": [],
      "type": "code",
      "_id": "61f94fd22c74c100170a48df",
      "deactivate": false,
      "script": "/*\nRemove contacts from churches that they're no longer in\n*/\n\n// Load packages\nconst forEachOfSeries = require('async/forEachOfSeries');\n\n// Set up results structures to return info to the next step\nconst result = {};\nconst removedContactFromChurch = [];\n\n// Get input data needed\nconst { contacts, contactsAndChurches } = input;\n\n// Make an array of contact/church combinations to process\nconst contactAndChurchCombosToRemove = [];\n\n// Loop through contacts\nfor (let i = 0; i < contacts.length; i += 1) {\n    const thisContactAndChurches = contactsAndChurches[contacts[i]];\n\n    // Loop through churches to remove for each contact\n    for (let j = 0; j < contactsAndChurches[contacts[i]].churches.length; j += 1) {\n        // If church is not the church on the detail sheet\n        if ((thisContactAndChurches.churches[j] !== thisContactAndChurches.churchOnDetailSheet)\n        // Or Person has said their church is not listed\n        || thisContactAndChurches.churchIsNotListed\n        // Or Person has said they don't attend church at all\n        || thisContactAndChurches.attendsChurch === 'no') {\n            // Add the contact and church to the list to remove\n            contactAndChurchCombosToRemove.push({\n                contact: contacts[i],\n                church: thisContactAndChurches.churches[j]\n            });\n        }\n    }\n}\n\n// Function to execute on each contact\nfunction leaveGroup(contactAndChurchCombo, index, next) {\n    // https://api.fluro.io/teams/:teamID/leave/:contactID\n    $fluro.api.delete(`/teams/${contactAndChurchCombo.church}/leave/${contactAndChurchCombo.contact}`)\n        .then(() => {\n            removedContactFromChurch.push(contactAndChurchCombo);\n            next();\n        })\n        .catch((err) => next(err));\n}\n\n// Callback function — after all iterations are finished\nfunction leaveGroupCallback(err) {\n    if (err) {\n        const errorMessage = $fluro.utils.errorMessage(err);\n        return done(errorMessage, 'STOP');\n    }\n\n    // Return results\n    result.removedContactFromChurch = removedContactFromChurch;\n    input.result = result;\n    return done(null, input);\n}\n\n// Run the async function\nreturn forEachOfSeries(contactAndChurchCombosToRemove, leaveGroup, leaveGroupCallback);"
    },
    {
      "conditions": [],
      "type": "code",
      "_id": "61ffa6a5b6d813001556c712",
      "script": "/*\nAdd contacts to their current church (current church as determined from the Detail Sheet)\n*/\n\n// Load packages\nconst forEachOfSeries = require('async/forEachOfSeries');\n\n// Set up headers\n// Set up request headers\nconst headers = { 'Content-Type': 'application/json; charset=utf-8' };\n\n// Set up results structures to return info to the next step\nconst addedContactToChurch = [];\n\n// Get input data needed\nconst { contacts, contactsAndChurches } = input;\n\n// Build an array of contacts and churchces to loop through\nconst contactsAndChurchToAdd = [];\n\n// Loop through contacts\nfor (let i = 0; i < contacts.length; i += 1) {\n    const thisContactAndChurches = contactsAndChurches[contacts[i]];\n    const thisChurchOnDetailSheet = thisContactAndChurches.churchOnDetailSheet;\n\n    // If the church on the detail sheet not null,\n    // and is not in the church array\n    if (!thisContactAndChurches.churches.includes(thisChurchOnDetailSheet)\n    && thisChurchOnDetailSheet !== null) {\n        // Add it to the array of churches to add to contats\n        contactsAndChurchToAdd.push({\n            contact: thisContactAndChurches.contact,\n            church: thisChurchOnDetailSheet\n        });\n    }\n}\n\n// Function to execute on each contact\nfunction joinGroup({ contact, church }, index, next) {\n    // Make the body of the request the contact ID\n    const body = {\n        _id: contact\n    };\n\n    // https://api.fluro.io/teams/:teamID/join\n    $fluro.api.post(`/teams/${church}/join`, body, headers)\n        .then(() => {\n            addedContactToChurch.push({\n                contact,\n                church\n            });\n\n            next();\n        })\n        .catch((err) => next(err));\n}\n\n// Callback function — after all iterations are finished\nfunction joinGroupCallback(err) {\n    if (err) {\n        const errorMessage = $fluro.utils.errorMessage(err);\n        return done(errorMessage, 'STOP');\n    }\n\n    // Return results\n    input.addedContactToChurch = addedContactToChurch;\n    return done(null, input);\n}\n\n// Run the async function\nreturn forEachOfSeries(contactsAndChurchToAdd, joinGroup, joinGroupCallback);",
      "deactivate": false
    },
    {
      "conditions": [],
      "type": "stop",
      "_id": "61f7d7535b9b1d0011e9750b",
      "deactivate": false
    }
  ],
  "permissionSets": [
    {
      "realms": [
        {
          "_id": "5e82a7cd281d6602b698b483",
          "status": "active",
          "title": "Christian Conventions of WA Inc",
          "color": "#7f12b3",
          "bgColor": "#e7b3ff",
          "created": "2020-03-31T02:15:41.877Z",
          "updated": "2020-03-31T02:15:41.912Z",
          "slug": "christian-conventions-of-wa-inc",
          "_type": "realm"
        }
      ],
      "roles": [
        {
          "_id": "57f4640c461bb7401a858f77",
          "title": "Full Access",
          "_type": "role",
          "realms": [
            "54ebd2ef3a6e88a31bb68640"
          ],
          "status": "active",
          "updated": "2021-02-24T06:19:11.856Z",
          "created": "2016-10-05T02:23:08.750Z",
          "firstLine": "Grants access to Create, Edit, View and Delete almost every type of content in the system"
        }
      ]
    }
  ],
  "title": "Update Contact's church from Detail Sheet",
  "deactivated": false,
  "account": {
    "_id": "5e82a7cd281d6602b698b481",
    "status": "active",
    "title": "CCOWA",
    "countryCode": "AU",
    "timezone": "Australia/Perth"
  },
  "author": {
    "_id": "5eb14f76f4e2c15ffb9bf805",
    "firstName": "Sam",
    "lastName": "Rae",
    "name": "Sam Rae",
    "_type": "user"
  },
  "managedAuthor": null,
  "_type": "reaction",
  "updatedBy": "Sam Rae",
  "created": "2022-01-31T11:06:23.988Z",
  "updated": "2023-06-13T07:20:51.255Z",
  "tests": [
    {
      "_id": "61f7c66d5b9b1d0011e97304",
      "title": "CREDO 2022 Registration (Chris Metcalf)",
      "json": "{\n  \"trigger\": \"content.create\",\n  \"data\": {\n    \"_type\": \"interaction\",\n    \"definition\": \"credo2022\",\n    \"submittedData\": {\n      \"title\": \"CREDO 2022\",\n      \"data\": {\n        \"contact\": [\n          \"5e97d9ca6a9f734dcdc920e1\"\n        ],\n        \"_paymentGateway\": \"61f5553f7f6b4301bf713a61\",\n        \"invoicenumber\": \"Metc-0435\",\n        \"donationAmount\": 100,\n        \"iamover18\": true,\n        \"discountcode\": \"regoisfree2022\"\n      },\n      \"realms\": [\n        \"5e82a7ce281d6602b698b488\"\n      ],\n      \"rawData\": {\n        \"contact\": [\n          {\n            \"details\": {\n              \"churchDetails\": {\n                \"data\": {\n                  \"attendsChurch\": \"yes\",\n                  \"churchAttending\": {\n                    \"_id\": \"5e9d1c909b953262c33e24ba\",\n                    \"status\": \"active\",\n                    \"realms\": [\n                      \"5e9d1c929b953262c33e24da\",\n                      \"5e82a7cd281d6602b698b483\"\n                    ],\n                    \"title\": \"Mundaring Church of Christ\",\n                    \"_type\": \"team\",\n                    \"created\": \"2020-04-20T03:52:48.167Z\",\n                    \"updated\": \"2020-11-16T06:43:05.690Z\",\n                    \"slug\": \"mundaring-church-of-christ-hpionqu2e\",\n                    \"definition\": \"church\",\n                    \"value\": \"5e9d1c909b953262c33e24ba\"\n                  }\n                }\n              }\n            },\n            \"dietaryRequirements\": [],\n            \"firstName\": \"Chris\",\n            \"lastName\": \"Metcalf\",\n            \"gender\": \"male\",\n            \"dob\": \"1989-04-17T00:00:00.000Z\",\n            \"email\": \"Chris.Metcalf.email@gmail.com\",\n            \"phoneNumber\": \"0410895019\",\n            \"registrationtype\": \"standard\",\n            \"mealPreference\": \"Butter chicken\",\n            \"elective\": \"Banksy, Spacey Jane, Fremantle, and Christians\",\n            \"elective2\": \"Banksy, Spacey Jane, Fremantle, and Christians\"\n          }\n        ],\n        \"_paymentGateway\": \"61f5553f7f6b4301bf713a61\",\n        \"invoicenumber\": \"Metc-0435\",\n        \"donationAmount\": 100,\n        \"iamover18\": true,\n        \"discountcode\": \"regoisfree2022\"\n      },\n      \"connectionData\": {\n        \"ip\": {\n          \"clientIp\": \"144.138.71.224\",\n          \"clientIpRoutable\": true\n        }\n      },\n      \"applicationAuthor\": \"5eff0aa041a86b0cfbe961c5\",\n      \"account\": \"5e82a7cd281d6602b698b481\",\n      \"paymentModifiers\": [\n        {\n          \"title\": \"Saturday Only Registration\",\n          \"operation\": \"add\",\n          \"value\": 0,\n          \"total\": 0\n        },\n        {\n          \"title\": \"Standard registrations\",\n          \"operation\": \"add\",\n          \"value\": 8000,\n          \"total\": 8000\n        },\n        {\n          \"title\": \"Free registration\",\n          \"operation\": \"set\",\n          \"value\": 0,\n          \"total\": 0\n        },\n        {\n          \"title\": \"EarlyBird\",\n          \"operation\": \"subtract\",\n          \"value\": 500,\n          \"total\": -500\n        }\n      ],\n      \"primaryEmail\": \"chris.metcalf.email@gmail.com\",\n      \"contact\": null,\n      \"contacts\": [\n        \"5e97d9ca6a9f734dcdc920e1\"\n      ],\n      \"agreements\": {\n        \"iamover18\": \"1. Age Restriction: To attend this event, you must be 18 years or older.\\n2. Sponsor Scheme: A contribution to this scheme helps to cover the cost of registration to our conferences for those otherwise unable to attend. If you wish to apply for a subsidy, please contact the registrar at credoperth@gmail.com. \\n3. Refund Policy: No refund is available for delegates who cancel after the registration closing date.\\n4. The earlybird discount is only available until 11:59pm 14th March 2022.\\n5. Walk-ins on Friday and Saturday night will be available at $10pp subject to availability.\\n6. Please be aware that government regulations are fluid and we will inform you if any restrictions affect CREDO 2022\"\n      },\n      \"attemptLog\": \"61f68073642d62021183e371\",\n      \"mentions\": [],\n      \"hashtags\": [],\n      \"_type\": \"interaction\",\n      \"definition\": \"credo2022\"\n    }\n  },\n  \"item\": {\n    \"_id\": \"61f68076642d62021183e392\",\n    \"owners\": [],\n    \"managedOwners\": [],\n    \"realms\": [\n      \"5e82a7ce281d6602b698b488\"\n    ],\n    \"title\": \"CREDO 2022\",\n    \"_type\": \"interaction\",\n    \"definition\": \"credo2022\"\n  }\n}",
      "testEmail": "sam@stalbans.org.au"
    },
    {
      "_id": "61fa51582c74c100170a6a11",
      "title": "Test form (2 contacts)",
      "json": "{\n  \"trigger\": \"content.create\",\n  \"data\": {\n    \"_type\": \"interaction\",\n    \"definition\": \"testLiveSquarePayment\",\n    \"submittedData\": {\n      \"title\": \"Test live Square integration\",\n      \"data\": {\n        \"contact\": [\n          \"5e97e0806a9f734dcdc940f1\",\n          \"619ca4884de7ec000f03a8af\"\n        ],\n        \"_paymentGateway\": \"61f555d2a0158d01e7c9fa28\",\n        \"cost\": \"0\"\n      },\n      \"realms\": [\n        \"61f546264d66c70018d73006\"\n      ],\n      \"rawData\": {\n        \"contact\": [\n          {\n            \"firstName\": \"Sam\",\n            \"lastName\": \"Rae\",\n            \"email\": \"samrae@gmail.com\"\n          },\n          {\n            \"firstName\": \"Test\",\n            \"lastName\": \"Person\",\n            \"email\": \"samrae+test@gmail.com\"\n          }\n        ],\n        \"_paymentGateway\": \"61f555d2a0158d01e7c9fa28\",\n        \"cost\": \"0\"\n      },\n      \"connectionData\": {\n        \"ip\": {\n          \"clientIp\": \"159.196.133.245\",\n          \"clientIpRoutable\": true\n        }\n      },\n      \"applicationAuthor\": \"5eff0aa041a86b0cfbe961c5\",\n      \"account\": \"5e82a7cd281d6602b698b481\",\n      \"paymentModifiers\": [\n        {\n          \"title\": \"Registration\",\n          \"operation\": \"add\",\n          \"value\": 0,\n          \"total\": 0\n        }\n      ],\n      \"primaryEmail\": \"samrae@gmail.com\",\n      \"contact\": null,\n      \"contacts\": [\n        \"5e97e0806a9f734dcdc940f1\",\n        \"619ca4884de7ec000f03a8af\"\n      ],\n      \"attemptLog\": \"61fa16defbe34d0344ab855e\",\n      \"mentions\": [],\n      \"hashtags\": [],\n      \"_type\": \"interaction\",\n      \"definition\": \"testLiveSquarePayment\"\n    }\n  },\n  \"item\": {\n    \"_id\": \"61fa16dffbe34d0344ab856d\",\n    \"owners\": [],\n    \"managedOwners\": [],\n    \"realms\": [\n      \"61f546264d66c70018d73006\"\n    ],\n    \"title\": \"Test live Square integration\",\n    \"_type\": \"interaction\",\n    \"definition\": \"testLiveSquarePayment\"\n  }\n}",
      "testEmail": "sam@stalbans.org.au"
    },
    {
      "_id": "61ffdaf2c4ed611bd313f8cb",
      "title": "Church Details edit",
      "json": "{\n  \"trigger\": \"content.edit\",\n  \"data\": {\n    \"diff\": {\n      \"_references\": {\n        \"0\": [\n          \"617fd3585efd500c44d9ce60\"\n        ],\n        \"_t\": \"a\",\n        \"_0\": [\n          \"6183a592ff54a70c8879706c\",\n          0,\n          0\n        ]\n      },\n      \"data\": {\n        \"churchAttending\": [\n          \"6183a592ff54a70c8879706c\",\n          \"617fd3585efd500c44d9ce60\"\n        ]\n      }\n    }\n  },\n  \"item\": {\n    \"_id\": \"619ca4f325441b00101f290b\",\n    \"owners\": [],\n    \"managedOwners\": [],\n    \"realms\": [\n      \"619376c2ac6eda000f1d32cb\"\n    ],\n    \"definition\": \"churchDetails\",\n    \"_type\": \"contactdetail\",\n    \"title\": \"Test Person - Church Details\"\n  }\n}",
      "testEmail": "sam@stalbans.org.au"
    },
    {
      "_id": "6200b11fe7912201934f2156",
      "title": "Update Details sheet — No church selected",
      "json": "{\n  \"trigger\": \"content.edit\",\n  \"data\": {\n    \"diff\": {\n      \"_references\": {\n        \"_t\": \"a\",\n        \"_0\": [\n          \"6183a592ff54a70c8879706c\",\n          0,\n          0\n        ]\n      },\n      \"data\": {\n        \"churchAttending\": [\n          \"6183a592ff54a70c8879706c\",\n          0,\n          0\n        ]\n      }\n    }\n  },\n  \"item\": {\n    \"_id\": \"619ca4f325441b00101f290b\",\n    \"owners\": [],\n    \"managedOwners\": [],\n    \"realms\": [\n      \"619376c2ac6eda000f1d32cb\"\n    ],\n    \"definition\": \"churchDetails\",\n    \"_type\": \"contactdetail\",\n    \"title\": \"Test Person - Church Details\"\n  }\n}",
      "testEmail": "sam@stalbans.org.au"
    },
    {
      "_id": "6200b11fe7912201934f2157",
      "title": "Random not-ok input",
      "json": "{\n  \"trigger\": \"contact.birthday\",\n  \"data\": {\n    \"dobVerified\": true,\n    \"ageNow\": 57,\n    \"ageBefore\": 56\n  },\n  \"item\": {\n    \"_id\": \"5e97e8036a9f734dcdc961c9\",\n    \"owners\": [],\n    \"managedOwners\": [],\n    \"realms\": [\n      \"5e97abd48beea3051136186f\",\n      \"5e9d1c1c9b953262c33e1ab0\",\n      \"5e82a7ce281d6602b698b489\",\n      \"5e82a7cd281d6602b698b485\",\n      \"5f34b2ef2aa7720d3a882766\",\n      \"608a565b6eb42c090022c3fd\",\n      \"608a56b56eb42c090022d259\"\n    ],\n    \"_type\": \"contact\",\n    \"title\": \"Jenny Tasker\"\n  }\n}",
      "testEmail": "sam@stalbans.org.au"
    },
    {
      "_id": "6200b11fe7912201934f2158",
      "title": "Actual Input from detail sheet change",
      "json": "{\n    \"account\": \"5e82a7cd281d6602b698b481\",\n    \"user\": {\n        \"_id\": \"5eb14f76f4e2c15ffb9bf805\",\n        \"name\": \"Sam Rae\",\n        \"firstName\": \"Sam\",\n        \"lastName\": \"Rae\",\n        \"email\": \"sam@stalbans.org.au\",\n        \"persona\": \"5eb14f10ff872a540dbbbe16\",\n        \"accountType\": \"standard\"\n    },\n    \"item\": \"619ca4f325441b00101f290b\",\n    \"data\": {\n        \"diff\": {\n            \"_references\": {\n                \"_t\": \"a\",\n                \"_0\": [\n                    \"617fd3585efd500c44d9ce60\",\n                    0,\n                    0\n                ]\n            },\n            \"data\": {\n                \"churchAttending\": [\n                    \"617fd3585efd500c44d9ce60\",\n                    0,\n                    0\n                ]\n            }\n        }\n    },\n    \"key\": \"content.edit\",\n    \"trigger\": \"content.edit\",\n    \"message\": \"Updated Test Person - Church Details\",\n    \"model\": \"contactdetail\",\n    \"managedUser\": \"5eb14f10ff872a540dbbbe16\"\n}",
      "testEmail": "sam@stalbans.org.au"
    },
    {
      "_id": "6205b87dab5822001217102a",
      "title": "Church not listed (Beth & Stephen Bruce, CREDO 2022)",
      "json": "{\n  \"trigger\": \"content.create\",\n  \"data\": {\n    \"_type\": \"interaction\",\n    \"definition\": \"credo2022\",\n    \"submittedData\": {\n      \"title\": \"CREDO 2022\",\n      \"data\": {\n        \"contact\": [\n          \"5e97da1f6a9f734dcdc922b5\",\n          \"620503c7658a980f10921de4\"\n        ],\n        \"_paymentGateway\": \"61f5553f7f6b4301bf713a61\",\n        \"invoicenumber\": \"Bruc-6362\",\n        \"donationAmount\": 100,\n        \"iamover18\": true\n      },\n      \"realms\": [\n        \"5e82a7ce281d6602b698b488\"\n      ],\n      \"rawData\": {\n        \"contact\": [\n          {\n            \"details\": {\n              \"churchDetails\": {\n                \"data\": {\n                  \"attendsChurch\": \"yes\",\n                  \"churchIsNotListed\": true,\n                  \"churchNotListedName\": \"Providence Bayswater\"\n                }\n              }\n            },\n            \"dietaryRequirements\": [],\n            \"firstName\": \"Beth\",\n            \"lastName\": \"Bruce\",\n            \"gender\": \"female\",\n            \"dob\": \"2000-03-03T00:00:00.000Z\",\n            \"email\": \"perthmillsbeth@gmail.com\",\n            \"phoneNumber\": \"0481180591\",\n            \"registrationtype\": \"standard\",\n            \"mealPreference\": \"Butter chicken\",\n            \"elective\": \"Engaging with Our Secular Culture\",\n            \"elective2\": \"Banksy, Spacey Jane, Fremantle, and Christians\"\n          },\n          {\n            \"details\": {\n              \"churchDetails\": {\n                \"data\": {\n                  \"attendsChurch\": \"yes\",\n                  \"churchIsNotListed\": true,\n                  \"churchNotListedName\": \"Providence Bayswater\"\n                }\n              }\n            },\n            \"dietaryRequirements\": [],\n            \"firstName\": \"Stephen\",\n            \"lastName\": \"Bruce\",\n            \"gender\": \"male\",\n            \"dob\": \"1997-11-11T00:00:00.000Z\",\n            \"email\": \"sbruces.place@gmail.com\",\n            \"phoneNumber\": \"0422268827\",\n            \"registrationtype\": \"standard\",\n            \"mealPreference\": \"Jamaican Jerk chicken (GF/DF)\",\n            \"elective\": \"Engaging with Our Secular Culture\",\n            \"elective2\": \"Christ and Politics\"\n          }\n        ],\n        \"_paymentGateway\": \"61f5553f7f6b4301bf713a61\",\n        \"invoicenumber\": \"Bruc-6362\",\n        \"donationAmount\": 100,\n        \"iamover18\": true\n      },\n      \"connectionData\": {\n        \"ip\": {\n          \"clientIp\": \"202.65.93.94\",\n          \"clientIpRoutable\": true\n        }\n      },\n      \"applicationAuthor\": \"5fbb64696ee9aa64b821d238\",\n      \"payment\": {\n        \"amount\": 15000,\n        \"integration\": \"61f5553f7f6b4301bf713a61\",\n        \"details\": {\n          \"nonce\": \"cnon:CBASEBkMlahSW0OYnSMjdFcUHpk\",\n          \"cardData\": {\n            \"digital_wallet_type\": \"NONE\",\n            \"card_brand\": \"MASTERCARD\",\n            \"last_4\": \"6808\",\n            \"exp_month\": 10,\n            \"exp_year\": 2025\n          },\n          \"idempotencyKey\": \"17ee3969-de9b-4000-8e7e-631de594b000\"\n        }\n      },\n      \"account\": \"5e82a7cd281d6602b698b481\",\n      \"paymentModifiers\": [\n        {\n          \"title\": \"Saturday Only Registration\",\n          \"operation\": \"add\",\n          \"value\": 0,\n          \"total\": 0\n        },\n        {\n          \"title\": \"Standard registrations\",\n          \"operation\": \"add\",\n          \"value\": 16000,\n          \"total\": 16000\n        },\n        {\n          \"title\": \"EarlyBird\",\n          \"operation\": \"subtract\",\n          \"value\": 1000,\n          \"total\": 15000\n        }\n      ],\n      \"currency\": \"aud\",\n      \"amount\": 15000,\n      \"transactions\": [\n        \"620503c2658a980f10921dc3\"\n      ],\n      \"transaction\": \"620503c2658a980f10921dc3\",\n      \"primaryEmail\": \"perthmillsbeth@gmail.com\",\n      \"contact\": null,\n      \"contacts\": [\n        \"5e97da1f6a9f734dcdc922b5\",\n        \"620503c7658a980f10921de4\"\n      ],\n      \"agreements\": {\n        \"iamover18\": \"1. Age Restriction: To attend this event, you must be 18 years or older.\\n2. Sponsor Scheme: A contribution to this scheme helps to cover the cost of registration to our conferences for those otherwise unable to attend. If you wish to apply for a subsidy, please contact the registrar at credoperth@gmail.com. \\n3. Refund Policy: No refund is available for delegates who cancel after the registration closing date.\\n4. The earlybird discount is only available until 11:59pm 14th March 2022.\\n5. Walk-ins on Friday and Saturday night will be available at $10pp subject to availability.\\n6. Please be aware that government regulations are fluid and we will inform you if any restrictions affect CREDO 2022\"\n      },\n      \"attemptLog\": \"620503bf658a980f10921dc1\",\n      \"mentions\": [],\n      \"hashtags\": [],\n      \"_type\": \"interaction\",\n      \"definition\": \"credo2022\"\n    }\n  },\n  \"item\": {\n    \"_id\": \"620503c8658a980f10921df7\",\n    \"owners\": [],\n    \"managedOwners\": [],\n    \"realms\": [\n      \"5e82a7ce281d6602b698b488\"\n    ],\n    \"title\": \"CREDO 2022\",\n    \"_type\": \"interaction\",\n    \"definition\": \"credo2022\"\n  }\n}",
      "testEmail": "sam@stalbans.org.au"
    },
    {
      "_id": "620bb32b8e682700170b0fb9",
      "title": "Form (Not attending church)",
      "json": "{\n  \"trigger\": \"content.create\",\n  \"data\": {\n    \"_type\": \"interaction\",\n    \"definition\": \"newChurchSetupTest\",\n    \"submittedData\": {\n      \"title\": \"New church setup test\",\n      \"data\": {\n        \"contact\": [\n          \"619ca4884de7ec000f03a8af\"\n        ]\n      },\n      \"realms\": [\n        \"61f546264d66c70018d73006\"\n      ],\n      \"rawData\": {\n        \"contact\": [\n          {\n            \"details\": {\n              \"churchDetails\": {\n                \"data\": {\n                  \"attendsChurch\": \"no\"\n                }\n              }\n            },\n            \"firstName\": \"Test\",\n            \"lastName\": \"Person\",\n            \"gender\": \"male\",\n            \"dob\": \"1982-05-19T00:00:00.000Z\",\n            \"email\": \"samrae+test@gmail.com\",\n            \"phoneNumber\": \"0439769319\"\n          }\n        ]\n      },\n      \"connectionData\": {\n        \"ip\": {\n          \"clientIp\": \"159.196.133.245\",\n          \"clientIpRoutable\": true\n        }\n      },\n      \"applicationAuthor\": \"5eff0aa041a86b0cfbe961c5\",\n      \"account\": \"5e82a7cd281d6602b698b481\",\n      \"primaryEmail\": \"samrae+test@gmail.com\",\n      \"contact\": null,\n      \"contacts\": [\n        \"619ca4884de7ec000f03a8af\"\n      ],\n      \"attemptLog\": \"620ba45f38ef190017e73864\",\n      \"mentions\": [],\n      \"hashtags\": [],\n      \"_type\": \"interaction\",\n      \"definition\": \"newChurchSetupTest\"\n    }\n  },\n  \"item\": {\n    \"_id\": \"620ba46238ef190017e7386a\",\n    \"owners\": [],\n    \"managedOwners\": [],\n    \"realms\": [\n      \"61f546264d66c70018d73006\"\n    ],\n    \"title\": \"New church setup test\",\n    \"_type\": \"interaction\",\n    \"definition\": \"newChurchSetupTest\"\n  }\n}",
      "testEmail": "sam@stalbans.org.au"
    },
    {
      "_id": "620bb32b8e682700170b0fba",
      "title": "Blank new church name",
      "json": "{\n  \"trigger\": \"content.edit\",\n  \"data\": {\n    \"diff\": {\n      \"_references\": {\n        \"_t\": \"a\",\n        \"_0\": [\n          \"617fd3585efd500c44d9ce60\",\n          0,\n          0\n        ]\n      },\n      \"data\": {\n        \"churchAttending\": [\n          {\n            \"_id\": \"617fd3585efd500c44d9ce60\"\n          },\n          0,\n          0\n        ],\n        \"churchIsNotListed\": [\n          false,\n          true\n        ],\n        \"churchNotListedName\": [\n          \"Test church\",\n          \"\"\n        ]\n      }\n    }\n  },\n  \"item\": {\n    \"_id\": \"620a65e9d59ef400184e506a\",\n    \"owners\": [\n      \"5eb14f76f4e2c15ffb9bf805\"\n    ],\n    \"managedOwners\": [\n      \"5eb14f10ff872a540dbbbe16\"\n    ],\n    \"realms\": [\n      \"619376c2ac6eda000f1d32cb\"\n    ],\n    \"_type\": \"contactdetail\",\n    \"author\": \"5eb14f76f4e2c15ffb9bf805\",\n    \"managedAuthor\": \"5eb14f10ff872a540dbbbe16\",\n    \"definition\": \"churchDetails\",\n    \"title\": \"Test Person - Church Details\"\n  }\n}",
      "testEmail": "sam@stalbans.org.au"
    },
    {
      "_id": "621f8cacaf3a0f0088188759",
      "title": "Update PMC Details (ie. invalid detail sheet)",
      "json": "{\n  \"trigger\": \"content.edit\",\n  \"data\": {\n    \"diff\": {\n      \"data\": {\n        \"pmcKeyContact\": {\n          \"churchname\": [\n            \"\",\n            \"St Alban's\"\n          ],\n          \"numberBrochures\": [\n            \"\",\n            \"25\"\n          ],\n          \"street\": [\n            \"\",\n            \"37a Third Ave\"\n          ],\n          \"suburb\": [\n            \"\",\n            \"Bassendean\"\n          ],\n          \"state\": [\n            \"\",\n            \"WA\"\n          ],\n          \"postcode\": [\n            \"\",\n            \"6054\"\n          ]\n        }\n      }\n    }\n  },\n  \"item\": {\n    \"_id\": \"621f29d67fe9a00035e51068\",\n    \"owners\": [],\n    \"managedOwners\": [],\n    \"realms\": [\n      \"5e82a7cd281d6602b698b484\"\n    ],\n    \"definition\": \"pmcDetails\",\n    \"_type\": \"contactdetail\",\n    \"title\": \"Sam Rae - PMC Details\"\n  }\n}",
      "testEmail": "sam@stalbans.org.au"
    },
    {
      "_id": "621f8cacaf3a0f008818875a",
      "title": "Submit wrong type of details sheet via form",
      "json": "{\"account\":\"5e82a7cd281d6602b698b481\",\"user\":{\"_id\":\"5eff0aa041a86b0cfbe961c5\",\"accountType\":\"application\"},\"item\":\"621f2eea0381be0035a19de6\",\"data\":{\"_type\":\"interaction\",\"definition\":\"pmcKeyContactForm\",\"submittedData\":{\"title\":\"PMC Key Contact Form\",\"data\":{\"contact\":\"5e97e0806a9f734dcdc940f1\"},\"realms\":[\"5e82a7cd281d6602b698b484\"],\"rawData\":{\"contact\":{\"details\":{\"pmcDetails\":{\"data\":{\"pmcKeyContact\":{\"churchname\":\"St Alban's Anglican Church\",\"numberBrochures\":\"25\",\"street\":\"37a Third Ave\",\"suburb\":\"Bassendean\",\"state\":\"WA\",\"postcode\":\"6054\"}}}},\"firstName\":\"Sam\",\"lastName\":\"Rae\",\"email\":\"samrae@gmail.com\",\"phoneNumber\":\"0439769319\"}},\"connectionData\":{\"ip\":{\"clientIp\":\"144.139.213.249\",\"clientIpRoutable\":true}},\"applicationAuthor\":\"5eff0aa041a86b0cfbe961c5\",\"account\":\"5e82a7cd281d6602b698b481\",\"primaryEmail\":\"samrae@gmail.com\",\"contact\":null,\"contacts\":[\"5e97e0806a9f734dcdc940f1\"],\"attemptLog\":\"621f2ee70381be0035a19ddc\",\"mentions\":[],\"hashtags\":[],\"_type\":\"interaction\",\"definition\":\"pmcKeyContactForm\"}},\"key\":\"content.create\",\"trigger\":\"content.create\",\"message\":\"Created PMC Key Contact Form\",\"model\":\"interaction\"}",
      "testEmail": "sam@stalbans.org.au"
    },
    {
      "_id": "6315f9c3a631a70026aa04ac",
      "title": "Detail sheet that didn’t work 2022-09-02",
      "json": "{\n      \"account\": \"5e82a7cd281d6602b698b481\",\n      \"user\": {\n        \"_id\": \"62028c18e7912201934f8b9d\",\n        \"accountType\": \"application\"\n      },\n      \"item\": \"6311607b47af380025d080be\",\n      \"data\": {\n        \"_type\": \"contactdetail\",\n        \"definition\": \"churchDetails\",\n        \"submittedData\": {\n          \"data\": {\n            \"attendsChurch\": \"yes\",\n            \"churchAttending\": \"5e9d1d549b953262c33e3184\"\n          },\n          \"contact\": {\n            \"title\": \"Susan Miles\",\n            \"_id\": \"6311607b47af380025d080b9\"\n          },\n          \"definition\": \"churchDetails\",\n          \"account\": \"5e82a7cd281d6602b698b481\",\n          \"status\": \"draft\",\n          \"realms\": [\n            {\n              \"_id\": \"619376c2ac6eda000f1d32cb\",\n              \"title\": \"Common\"\n            }\n          ],\n          \"mentions\": [],\n          \"hashtags\": [],\n          \"_type\": \"contactdetail\",\n          \"title\": \"Susan Miles - Church Details\"\n        }\n      },\n      \"key\": \"content.create\",\n      \"trigger\": \"content.create\",\n      \"message\": \"Created Susan Miles - Church Details\",\n      \"model\": \"contactdetail\"\n    }",
      "testEmail": "samrae@gmail.com"
    },
    {
      "_id": "6315f9c3a631a70026aa04ad",
      "title": "Form submission that didn’t work 2022-09-02",
      "json": "{\n    \"data\": {\n        \"_type\":\"interaction\"\n    },\n    \"item\": {\n        \"_id\": \"6311608047af380025d080f6\"\n    }\n}",
      "testEmail": "samrae@gmail.com"
    },
    {
      "_id": "648818d3db1d2d00344e309a",
      "title": "Test  (Perth Men's Convention 2023)",
      "json": "{\n  \"trigger\": \"content.create\",\n  \"data\": {\n    \"_type\": \"interaction\",\n    \"definition\": \"perthMensConvention2023\",\n    \"submittedData\": {\n      \"title\": \"Perth Men's Convention 2023\",\n      \"data\": {\n        \"contact\": [\n          \"619ca4884de7ec000f03a8af\",\n          \"64880ee5f201c60034f1e1d6\"\n        ],\n        \"_paymentGateway\": \"61f55567d14c8e0dadeae0e9\",\n        \"iwouldliketodonatetothePmcSponsorScheme\": false,\n        \"invoicenumber\": \"Pers-1875\",\n        \"iamover18\": true,\n        \"discountcode\": \"pmc23band\"\n      },\n      \"realms\": [\n        \"5e82a7cd281d6602b698b484\"\n      ],\n      \"event\": \"6400198fa7bd5e003441bac7\",\n      \"rawData\": {\n        \"contact\": [\n          {\n            \"gender\": \"male\",\n            \"family\": {\n              \"address\": {\n                \"addressLine1\": \"37A Third Ave \",\n                \"suburb\": \"Bassendean \",\n                \"state\": \"WA\",\n                \"postalCode\": \"6054\"\n              },\n              \"title\": \"Person\"\n            },\n            \"samePostal\": true,\n            \"churchDetails\": {\n              \"data\": {\n                \"attendsChurch\": \"yes\",\n                \"churchAttending\": {\n                  \"_id\": \"5e9d1bad9b953262c33e1294\",\n                  \"status\": \"active\",\n                  \"realms\": [\n                    \"5e9d1bae9b953262c33e1299\",\n                    \"5e82a7cd281d6602b698b483\"\n                  ],\n                  \"title\": \"Providence Midland\",\n                  \"_type\": \"team\",\n                  \"created\": \"2020-04-20T03:49:01.679Z\",\n                  \"updated\": \"2022-03-06T12:29:23.207Z\",\n                  \"slug\": \"providence-midland-hnu9hjyo2l\",\n                  \"definition\": \"church\",\n                  \"value\": \"5e9d1bad9b953262c33e1294\"\n                }\n              }\n            },\n            \"dietaryRequirements\": [],\n            \"firstName\": \"Test\",\n            \"lastName\": \"Person\",\n            \"email\": \"samrae+test@gmail.com\",\n            \"phoneNumber\": \"0439769319 \",\n            \"dob\": \"1982-05-19T00:00:00.000Z\",\n            \"registrationtype\": \"Standard\",\n            \"timezone\": \"Australia/Perth\"\n          },\n          {\n            \"gender\": \"male\",\n            \"family\": {\n              \"address\": {\n                \"addressLine1\": \"37A Third Ave \",\n                \"suburb\": \"Bassendean \",\n                \"state\": \"WA\",\n                \"postalCode\": \"6054\"\n              },\n              \"title\": \"Person\"\n            },\n            \"samePostal\": true,\n            \"churchDetails\": {\n              \"data\": {\n                \"attendsChurch\": \"yes\",\n                \"churchAttending\": {\n                  \"_id\": \"5e9d1bad9b953262c33e1294\",\n                  \"status\": \"active\",\n                  \"realms\": [\n                    \"5e9d1bae9b953262c33e1299\",\n                    \"5e82a7cd281d6602b698b483\"\n                  ],\n                  \"title\": \"Providence Midland\",\n                  \"_type\": \"team\",\n                  \"created\": \"2020-04-20T03:49:01.679Z\",\n                  \"updated\": \"2022-03-06T12:29:23.207Z\",\n                  \"slug\": \"providence-midland-hnu9hjyo2l\",\n                  \"definition\": \"church\",\n                  \"value\": \"5e9d1bad9b953262c33e1294\"\n                }\n              }\n            },\n            \"dietaryRequirements\": [],\n            \"firstName\": \"Test Son\",\n            \"lastName\": \"Person\",\n            \"email\": \"samrae+testson@gmail.com\",\n            \"phoneNumber\": \"0439769319\",\n            \"dob\": \"1982-05-19T00:00:00.000Z\",\n            \"registrationtype\": \"Sons\",\n            \"timezone\": \"Australia/Perth\"\n          }\n        ],\n        \"_paymentGateway\": \"61f55567d14c8e0dadeae0e9\",\n        \"iwouldliketodonatetothePmcSponsorScheme\": false,\n        \"invoicenumber\": \"Pers-1875\",\n        \"iamover18\": true,\n        \"discountcode\": \"pmc23band\"\n      },\n      \"connectionData\": {\n        \"ip\": {\n          \"clientIp\": \"159.196.132.87\",\n          \"clientIpRoutable\": true\n        }\n      },\n      \"applicationAuthor\": \"5eff0aa041a86b0cfbe961c5\",\n      \"account\": \"5e82a7cd281d6602b698b481\",\n      \"paymentModifiers\": [\n        {\n          \"title\": \"Accompanying Sons registrations\",\n          \"operation\": \"add\",\n          \"value\": 0,\n          \"total\": 0\n        },\n        {\n          \"title\": \"Concession registrations\",\n          \"operation\": \"add\",\n          \"value\": 0,\n          \"total\": 0\n        },\n        {\n          \"title\": \"Standard registrations\",\n          \"operation\": \"add\",\n          \"value\": 0,\n          \"total\": 0\n        },\n        {\n          \"title\": \"PMC Musicians\",\n          \"operation\": \"set\",\n          \"value\": 0,\n          \"total\": 0\n        }\n      ],\n      \"primaryEmail\": \"samrae+test@gmail.com\",\n      \"contact\": null,\n      \"contacts\": [\n        \"619ca4884de7ec000f03a8af\",\n        \"64880ee5f201c60034f1e1d6\"\n      ],\n      \"agreements\": {\n        \"iamover18\": \"1. You will receive communication from Perth Men’s Convention about future conventions. You can unsubscribe at any time. \\n\\n2. Age Restriction: To attend this event, you must be 18 years or older, however we do allow and encourage acompanying sons in Year 11 or 12 to attend accompanied by their Father or a responsible care giver. \\n\\n3. Registration & Refund policy: Refunds: Please note, there will be no refund for cancellation after 6th August 2023. If you have registered but are unable to attend on the day letting us know will help us know who is and isn’t expected on site.\\n\\n\\n4. Registrations: Full payment is required for registration. Registrations close 10pm Tuesday 10th August 2023, or when venue limit is reached. \\n\\n5. TICKETS: Tickets are not transferable without registrar consent. Please note that seating is limited and registrations will close when the venue limit is reached. To avoid disappointment early registration and payment is strongly recommended. Postal registrations need to allow time for postage and handling.\\n\\n6. Sponsor Scheme: A contribution to this scheme helps to cover the cost of registration to our conferences for those otherwise unable to attend. If you wish to apply for a subsidy, please contact the registrar at pmcreg@ccowa.org \\n\\n7. Refund Policy: No refund is available for delegates who cancel after the 6th August 2023.\\n\\n8. Walk-ins: Please Note we do not accept walkins. There will be no door registrations and payments on the day.\\n\\n9. ENQUIRIES: \\nFor Registration enquiries: Brad Vigus 0438 172 882 or pmcrego@ccowa.org\"\n      },\n      \"attemptLog\": \"64880ee0f201c60034f1e1c0\",\n      \"mentions\": [],\n      \"hashtags\": [],\n      \"_type\": \"interaction\",\n      \"definition\": \"perthMensConvention2023\"\n    }\n  },\n  \"item\": {\n    \"_id\": \"64880ee5f201c60034f1e1df\",\n    \"owners\": [],\n    \"managedOwners\": [],\n    \"realms\": [\n      \"5e82a7cd281d6602b698b484\"\n    ],\n    \"title\": \"Perth Men's Convention 2023\",\n    \"_type\": \"interaction\",\n    \"definition\": \"perthMensConvention2023\"\n  }\n}",
      "testEmail": "samrae@gmail.com"
    }
  ],
  "apikey": "$2a$10$M8ynMn0.2YHNgE1PJHMgMuhcP9SLn0NZ4dVcHtvfgowv05Rha9LYO",
  "data": {},
  "statDates": {
    "view": "2022-03-07T01:25:53.386Z"
  },
  "stats": {
    "view": 4
  }
}